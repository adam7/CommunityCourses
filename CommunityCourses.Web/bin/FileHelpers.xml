<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FileHelpers</name>
    </assembly>
    <members>
        <member name="T:FileHelpers.INotifyRead">
            <summary>
            Interface used to provide In record notification of read operations.
            </summary>
            <example>
            <code>
            private class SampleType: INotifyRead, INotifyWrite
            { ....
            
            	public void AfterRead(EngineBase engine, string line)
            	{
            		// Your Code Here
            	}
            	public void BeforeWrite(EngineBase engine)
            	{
            		// Your Code Here
            	}
            
            }
            </code>
            </example>
        </member>
        <member name="M:FileHelpers.INotifyRead.AfterRead(FileHelpers.EngineBase,System.String)">
            <summary>
            Method called by the engines after read a record from the source data.
            </summary>
            <param name="engine">The engine that makes the call.</param>
            <param name="line">The source line.</param>
        </member>
        <member name="T:FileHelpers.INotifyWrite">
            <summary>
            Interface used to provide <b>In record notification of write operations.</b>
            </summary>
            <example>
            <code>
            private class SampleType: INotifyRead, INotifyWrite
            { ....
            
            	public void AfterRead(EngineBase engine, string line)
            	{
            		// Your Code Here
            	}
            	public void BeforeWrite(EngineBase engine)
            	{
            		// Your Code Here
            	}
            
            }
            </code>
            </example>
        </member>
        <member name="M:FileHelpers.INotifyWrite.BeforeWrite(FileHelpers.EngineBase)">
            <summary>
            Method called by the engines before write a record to the destination stream.
            </summary>
            <param name="engine">The engine that makes the call.</param>
        </member>
        <member name="T:FileHelpers.ErrorInfo">
            <summary>Contains error information of the <see cref="T:FileHelpers.FileHelperEngine"/> class.</summary>
        </member>
        <member name="P:FileHelpers.ErrorInfo.LineNumber">
            <summary>The line number of the error</summary>
        </member>
        <member name="P:FileHelpers.ErrorInfo.RecordString">
            <summary>The string of the record of the error.</summary>
        </member>
        <member name="P:FileHelpers.ErrorInfo.ExceptionInfo">
            <summary>The exception that indicates the error.</summary>
        </member>
        <member name="T:FileHelpers.ConverterBase">
            <summary>
            Base class to provide bidirectional
            Field - String convertion.
            </summary>
        </member>
        <member name="M:FileHelpers.ConverterBase.StringToField(System.String)">
            <summary>
            Convert a string in the file to a field value.
            </summary>
            <param name="from">The string to convert.</param>
            <returns>The field value.</returns>
        </member>
        <member name="M:FileHelpers.ConverterBase.FieldToString(System.Object)">
            <summary>
            Convert a field value to an string to write this to the file.
            </summary>
            <remarks>The basic implementation performs a: from.ToString();</remarks>
            <param name="from">The field values to convert.</param>
            <returns>The string representing the field value.</returns>
        </member>
        <member name="M:FileHelpers.ConverterBase.ThrowConvertException(System.String,System.String)">
            <summary>
            Thorws a ConvertException with the passed values
            </summary>
            <param name="from">The source string.</param>
            <param name="errorMsg">The custom error msg.</param>
        </member>
        <member name="P:FileHelpers.ConverterBase.DefaultDateTimeFormat">
            <summary>
            <para>Allow you to set the default Date Format used for the converter.</para>
            <para>With the same format that the .NET framework.</para>
            <para>By default: "ddMMyyyy"</para>
            </summary>
        </member>
        <member name="P:FileHelpers.ConverterBase.CustomNullHandling">
            <summary>If the class retures false the engines donÂ´t pass null values to the converter. If true the engines pass all the values to the converter.</summary>
        </member>
        <member name="T:FileHelpers.ConverterKind">
            <summary>Indicates the convertion used in the <see cref="T:FileHelpers.FieldConverterAttribute"/>.</summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.None">
            <summary>Null Converter.</summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Date">
            <summary>
            <para>Convert from/to <b>Date</b> values.</para>
            <para>Params: arg1 is the <b>string</b> with the date format.</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Boolean">
            <summary>Convert from/to <b>Boolean</b> values.</summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Byte">
            <summary>
            <para>Convert from/to <b>Byte</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Int16">
            <summary>
            <para>Convert from/to <b>Int16 or short</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Int32">
            <summary>
            <para>Convert from/to <b>Int32 or int</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Int64">
            <summary>
            <para>Convert from/to <b>Int64 or long</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Decimal">
            <summary>
            <para>Convert from/to <b>Decimal</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Double">
            <summary>
            <para>Convert from/to <b>Double</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.Single">
            <summary>
            <para>Convert from/to <b>Single</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.SByte">
            <summary>
            <para>Convert from/to <b>Byte</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.UInt16">
            <summary>
            <para>Convert from/to <b>UInt16 or unsigned short</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.UInt32">
            <summary>
            <para>Convert from/to <b>UInt32 or unsigned int</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="F:FileHelpers.ConverterKind.UInt64">
            <summary>
            <para>Convert from/to <b>UInt64 or unsigned long</b> values.</para>
            <para>Params: arg1 is the <b>decimal separator</b>, by default '.'</para>
            </summary>
        </member>
        <member name="T:FileHelpers.EngineBase">
            <summary>Base class for the two engines of the library: <see cref="T:FileHelpers.FileHelperEngine"/> and <see cref="T:FileHelpers.FileHelperAsyncEngine"/></summary>
        </member>
        <member name="M:FileHelpers.EngineBase.SetProgressHandler(FileHelpers.ProgressChangeHandler)">
            <summary>Set the handler to the engine used to notify progress into the operations.</summary>
            <param name="handler">The <see cref="T:FileHelpers.ProgressChangeHandler"/></param>
        </member>
        <member name="M:FileHelpers.EngineBase.SetProgressHandler(FileHelpers.ProgressChangeHandler,FileHelpers.ProgressMode)">
            <summary>Set the handler to the engine used to notify progress into the operations.</summary>
            <param name="handler">Your <see cref="T:FileHelpers.ProgressChangeHandler"/> method.</param>
            <param name="mode">The <see cref="T:FileHelpers.ProgressMode"/> to use.</param>
        </member>
        <member name="P:FileHelpers.EngineBase.LineNumber">
            <summary>The current line number.</summary>
        </member>
        <member name="P:FileHelpers.EngineBase.TotalRecords">
            <summary>The total numbers of records in the last read/written file (only works with whole read/write).</summary>
        </member>
        <member name="P:FileHelpers.EngineBase.RecordType">
            <summary>Returns the type of records handled by this engine.</summary>
        </member>
        <member name="P:FileHelpers.EngineBase.HeaderText">
            <summary>The read header in the last read operation. If any.</summary>
        </member>
        <member name="P:FileHelpers.EngineBase.FooterText">
            <summary>The read footer in the last read operation. If any.</summary>
        </member>
        <member name="P:FileHelpers.EngineBase.Encoding">
            <summary>The encoding to Read and Write the streams.</summary>
            <remarks>Default is the system's current ANSI code page.</remarks>
            <value>Default is the system's current ANSI code page.</value>
        </member>
        <member name="P:FileHelpers.EngineBase.ErrorManager">
            <summary>This is a common class that manage the errors of the library.</summary>
            <remarks>You can, for example, get the errors, their number, Save them to a file, etc.</remarks>
        </member>
        <member name="T:FileHelpers.DataLink.DataStorage">
            <summary>Base class for all the Storage classes of the library or the custom Storage classes.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.Notify(FileHelpers.ProgressChangeHandler,FileHelpers.ProgressMode,System.Int32,System.Int32)">
            <summary>For internal Use.</summary>
            <param name="handler"></param>
            <param name="mode"></param>
            <param name="current"></param>
            <param name="total"></param>
        </member>
        <member name="F:FileHelpers.DataLink.DataStorage.mProgressMode">
            <summary>Indicates the way to notify the progress.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.DataStorage.mNotifyHandler">
            <summary>You method handler used to notify progress.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.SetProgressHandler(FileHelpers.ProgressChangeHandler)">
            <summary>Set the handler to the engine used to notify progress into the operations.</summary>
            <param name="handler">The <see cref="T:FileHelpers.ProgressChangeHandler"/></param>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.SetProgressHandler(FileHelpers.ProgressChangeHandler,FileHelpers.ProgressMode)">
            <summary>Set the handler to the engine used to notify progress into the operations.</summary>
            <param name="handler">Your <see cref="T:FileHelpers.ProgressChangeHandler"/> method.</param>
            <param name="mode">The <see cref="T:FileHelpers.ProgressMode"/> to use.</param>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.ExtractRecords">
            <summary>Must Return the records from the DataSource (DB, Excel, etc)</summary>
            <returns>The extracted records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.ExtractRecordsAsDT">
            <summary>Must Return the records from the DataSource (DB, Excel, etc)</summary>
            <returns>The extracted records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.InsertRecords(System.Object[])">
            <summary>Must Insert the records in a DataSource (DB, Excel, etc)</summary>
            <param name="records">The records to insert.</param>
        </member>
        <member name="F:FileHelpers.DataLink.DataStorage.mErrorManager">
            <summary>The Object responsable for manage the errors.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.AddError(System.Int32,System.Exception,System.String)">
            <summary>Add an error to the ErrorCollection.</summary>
            <param name="lineNumber">The line when the error occurs.</param>
            <param name="ex">The exception throwed, can be null.</param>
            <param name="recordLine">The record values</param>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.#ctor(System.Type)">
            <summary>Creates an instance of this class.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.ValuesToRecord(System.Object[])">
            <summary>Returns a record created from an Array of values</summary>
            <param name="values">The values used to created the record.</param>
            <returns>The just created record.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DataStorage.RecordToValues(System.Object)">
            <summary>Returns an array of value based on a record.</summary>
            <param name="record">The source record.</param>
            <returns>An array with the values of each field</returns>
        </member>
        <member name="P:FileHelpers.DataLink.DataStorage.RecordType">
            <summary>Returns the class that represent the records in the file.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DataStorage.ErrorManager">
            <summary>The Object responsable for manage the errors.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DataStorage.RecordFieldCount">
            <summary>The number of fields in the record class.</summary>
        </member>
        <member name="T:FileHelpers.DataLink.GenericDataLink">
            <summary>
            This class has the responsability to enable the two directional
            transformation.
            <list type="bullet">
            <item> DataStorage &lt;-&gt; DataStorage </item>
            </list>
            </summary>
            <remarks>
            <para>Uses two <see cref="T:FileHelpers.DataLink.DataStorage"/> to accomplish this task.</para>
            </remarks>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="class_diagram.html">Class Diagram</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
            <seealso href="example_datalink.html">Example of the DataLink</seealso>
            <seealso href="attributes.html">Attributes List</seealso>
        </member>
        <member name="M:FileHelpers.DataLink.GenericDataLink.#ctor(FileHelpers.DataLink.DataStorage,FileHelpers.DataLink.DataStorage)">
            <summary>Create a new instance of the class.</summary>
            <param name="provider1">The First <see cref="T:FileHelpers.DataLink.DataStorage"/> used to insert/extract records .</param>
            <param name="provider2">The Second <see cref="T:FileHelpers.DataLink.DataStorage"/> used to insert/extract records .</param>
        </member>
        <member name="M:FileHelpers.DataLink.GenericDataLink.CopyDataFrom1To2">
            <summary>Extract the records from DataStorage1 and Insert them to the DataStorage2.</summary>
            <returns>The Copied records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.GenericDataLink.CopyDataFrom2To1">
            <summary>Extract the records from DataStorage2 and Insert them to the DataStorage1.</summary>
            <returns>The Copied records.</returns>
        </member>
        <member name="P:FileHelpers.DataLink.GenericDataLink.DataStorage1">
            <summary>The fisrt <see cref="T:FileHelpers.DataLink.DataStorage"/> of the <see cref="T:FileHelpers.DataLink.GenericDataLink"/>.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.GenericDataLink.DataStorage2">
            <summary>The second <see cref="T:FileHelpers.DataLink.DataStorage"/> of the <see cref="T:FileHelpers.DataLink.GenericDataLink"/>.</summary>
        </member>
        <member name="T:FileHelpers.FieldDelimiterAttribute">
            <summary>Indicates a diferent delimiter for this field. </summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="T:FileHelpers.FieldAttribute">
            <summary>Base class of <see cref="T:FileHelpers.FieldFixedLengthAttribute"/> and <see cref="T:FileHelpers.FieldDelimiterAttribute"/></summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldAttribute.#ctor">
            <summary>Abstract class, see the inheritors.</summary>
        </member>
        <member name="M:FileHelpers.FieldDelimiterAttribute.#ctor(System.String)">
            <summary>Indicates a diferent delimiter for this field. </summary>
            <param name="separator">The separator string used to split the fields of the record.</param>
        </member>
        <member name="T:FileHelpers.MasterDetail.RecordAction">
            <summary>Used with the <see cref="T:FileHelpers.MasterDetail.MasterDetailSelector"/> Delegate to determines the action used by the <see cref="T:FileHelpers.MasterDetail.MasterDetailEngine"/></summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.RecordAction.Skip">
            <summary><b>Ignore</b> the current record.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.RecordAction.Master">
            <summary>Use the current record as <b>Master</b>.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.RecordAction.Detail">
            <summary>Use the current record as <b>Detail</b>.</summary>
        </member>
        <member name="T:FileHelpers.NetVisibility">
            <summary>Indicates the visibility of a member.</summary>
        </member>
        <member name="F:FileHelpers.NetVisibility.Public">
            <summary>Public visivility.</summary>
        </member>
        <member name="F:FileHelpers.NetVisibility.Internal">
            <summary>Internal visivility. (Friend in VB.NET)</summary>
        </member>
        <member name="F:FileHelpers.NetVisibility.Protected">
            <summary>Protected visivility.</summary>
        </member>
        <member name="F:FileHelpers.NetVisibility.Private">
            <summary>Private visivility.</summary>
        </member>
        <member name="T:FileHelpers.DelimitedRecordAttribute">
            <summary>Indicates that this class represents a delimited record. </summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="T:FileHelpers.TypedRecordAttribute">
            <summary>Base class for the record types..</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.TypedRecordAttribute.#ctor">
            <summary>Abstract class, see inheritors.</summary>
        </member>
        <member name="M:FileHelpers.DelimitedRecordAttribute.#ctor(System.String)">
            <summary>Indicates that this class represents a delimited record. </summary>
            <param name="delimiter">The separator string used to split the fields of the record.</param>
        </member>
        <member name="T:FileHelpers.MasterDetail.MasterDetailEngine">
            <summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsable to Read/Write <b>Master-Details</b> records from/to files or streams.</para>
		</summary><remarks>
		 <para>You can set the <see cref="P:FileHelpers.ErrorManager.ErrorMode"/> of this class when found an error, and can retrive them with the <see cref="P:FileHelpers.ErrorManager.Errors"/> property.</para>
		 <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="quick_start.html">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="examples.html">Examples Seccion</a> for more code.</para>
		</remarks><seealso href="quick_start.html">Quick Start Guide</seealso><seealso href="class_diagram.html">Class Diagram</seealso><seealso href="examples.html">Examples of Use</seealso><seealso href="attributes.html">Attributes List</seealso>
            <!-- No matching elements were found for the following include tag --><include file="Examples.xml" path="doc/examples/MasterDetailEngine/*"/>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.#ctor(System.Type,System.Type,FileHelpers.MasterDetail.MasterDetailSelector)">
            <summary>
			 Initializes a new instance of the MasterDetailEngine class with the specified type of records.
		</summary><param name="masterType">The master record class.</param><param name="detailType">The detail record class.</param><param name="recordSelector">The <see cref="T:FileHelpers.MasterDetail.MasterDetailSelector"/> to get the <see cref="T:FileHelpers.MasterDetail.RecordAction"/>.</param>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.#ctor(System.Type,System.Type,FileHelpers.MasterDetail.CommonSelector,System.String)">
            <summary>
			 Initializes a new instance of the MasterDetailEngine class with the specified type of records.
		</summary><param name="masterType">The master record class.</param><param name="detailType">The detail record class.</param><param name="action">The <see cref="T:FileHelpers.MasterDetail.CommonSelector"/> used by the engine.</param><param name="selector">The string passed to the selector.</param>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.ReadFile(System.String)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.ReadStream(System.IO.TextReader)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.ReadString(System.String)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteFile(System.String,FileHelpers.MasterDetail.MasterDetails[])">
            <summary>
		Write an array of records to the specified file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteFile(System.String,FileHelpers.MasterDetail.MasterDetails[],System.Int32)">
            <summary>
		Write the specified number of records from the array to a file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The array of records to write.</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteStream(System.IO.TextWriter,FileHelpers.MasterDetail.MasterDetails[])">
            <summary>
		Write an array of records to the specified Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteStream(System.IO.TextWriter,FileHelpers.MasterDetail.MasterDetails[],System.Int32)">
            <summary>
		Write the specified number of records in the array to the Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The array of records to write.</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteString(FileHelpers.MasterDetail.MasterDetails[])">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The array of records to write.</param><returns>The resulting string after write the records.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.WriteString(FileHelpers.MasterDetail.MasterDetails[],System.Int32)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The array of records to write.</param><returns>The resulting string after write the records.</returns><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.AppendToFile(System.String,FileHelpers.MasterDetail.MasterDetails)">
            <summary>
		Append a record to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="record">The record to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine.AppendToFile(System.String,FileHelpers.MasterDetail.MasterDetails[])">
            <summary>
		Append an array of records to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetailEngine.MasterType">
            <summary>Returns the type of the master records handled by this engine.</summary>
        </member>
        <member name="T:FileHelpers.FieldBase">
            <summary>Base class for all Field Types. Implements all the basic functionality of a field in a typed file.</summary>
        </member>
        <member name="T:FileHelpers.FileDiffEngine">
            <summary>Engine used to create diff files based on the <see cref="T:FileHelpers.IComparableRecord"/> interface.</summary>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:FileHelpers.FileDiffEngine"/>
            </summary>
            <param name="recordType">The record type class that implements the <see cref="T:FileHelpers.IComparableRecord"/> interface.</param>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.OnlyNewRecords(System.String,System.String)">
            <summary>Returns the records in newFile that not are in the sourceFile</summary>
            <param name="sourceFile">The file with the old records.</param>
            <param name="newFile">The file with the new records.</param>
            <returns>The records in newFile that not are in the sourceFile</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.OnlyMissingRecords(System.String,System.String)">
            <summary>Returns the records in newFile that not are in the sourceFile</summary>
            <param name="sourceFile">The file with the old records.</param>
            <param name="newFile">The file with the new records.</param>
            <returns>The records in newFile that not are in the sourceFile</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.OnlyDuplicatedRecords(System.String,System.String)">
            <summary>
            Returns the duplicated records in both files.
            </summary>
            <param name="file1">A file with record.</param>
            <param name="file2">A file with record.</param>
            <returns>The records that appear in both files.</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.OnlyNoDuplicatedRecords(System.String,System.String)">
            <summary>
            Returns the NON duplicated records in both files.
            </summary>
            <param name="file1">A file with record.</param>
            <param name="file2">A file with record.</param>
            <returns>The records that NOT appear in both files.</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine.WriteNewRecords(System.String,System.String,System.String)">
            <summary>Read the source file, the new file, get the new records and write them to a destination file.</summary>
            <param name="sourceFile">The file with the source records.</param>
            <param name="newFile">The file with the new records.</param>
            <param name="destFile">The destination file.</param>
            <returns>The new records on the new file.</returns>
        </member>
        <member name="T:FileHelpers.DataLink.FileDataLink">
            <summary>
            This class has the responsability to enable the two directional
            transformation.
            <list type="bullet">
            <item> File &lt;-&gt; DataStorage </item>
            </list>
            </summary>
            <remarks>
            <para>Uses an <see cref="P:FileHelpers.DataLink.FileDataLink.DataStorage"/> to accomplish this task.</para>
            <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="example_datalink.html">DataLink Sample</a> for more Info.</para>
            </remarks>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="class_diagram.html">Class Diagram</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
            <seealso href="example_datalink.html">Example of the DataLink</seealso>
            <seealso href="attributes.html">Attributes List</seealso>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.#ctor(FileHelpers.DataLink.DataStorage)">
            <summary>Create a new instance of the class.</summary>
            <param name="provider">The <see cref="T:FileHelpers.DataLink.DataStorage"/> used to performs the transformation.</param>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.ExtractToFile(System.String)">
            <summary>
            Extract records from the data source and insert them to the specified file using the DataLinkProvider <see cref="M:FileHelpers.DataLink.DataStorage.ExtractRecords"/> method.
            </summary>
            <param name="fileName">The files where the records be written.</param>
            <returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.ExtractToStream(System.IO.StreamWriter)">
            <summary>
            Extract records from the data source and insert them to the specified stream using the DataLinkProvider <see cref="M:FileHelpers.DataLink.DataStorage.ExtractRecords"/> method.
            </summary>
            <param name="writer">The stream where the records be written.</param>
            <returns>The extracted records</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.InsertFromFile(System.String)">
            <summary>Extract records from a file and insert them to the data source using the DataLinkProvider <see cref="M:FileHelpers.DataLink.DataStorage.InsertRecords(System.Object[])"/> method.</summary>
            <param name="fileName">The file with the source records.</param>
            <returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.InsertFromStream(System.IO.StreamReader)">
            <summary>Extract records from a stream and insert them to the data source using the DataLinkProvider <see cref="M:FileHelpers.DataLink.DataStorage.InsertRecords(System.Object[])"/> method.</summary>
            <param name="reader">The stream with the source records.</param>
            <returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.EasyExtractToFile(FileHelpers.DataLink.DataStorage,System.String)">
            <summary>The short way to Extract the records from a DataStorage to a file</summary>
            <param name="storage">The DataStorage from where get the records</param>
            <param name="filename">The file where to write the records to.</param>
            <returns>The Extracted records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileDataLink.EasyInsertFromFile(FileHelpers.DataLink.DataStorage,System.String)">
            <summary>The short way to Insert Records from a file to a DataStorage</summary>
            <param name="storage">The DataStorage where store the records.</param>
            <param name="filename">The file with the SourceRecords</param>
            <returns>The Inserted records</returns>
        </member>
        <member name="P:FileHelpers.DataLink.FileDataLink.FileHelperEngine">
            <summary> The internal <see cref="T:FileHelpers.FileHelperEngine"/> used to the file or stream ops. </summary>
        </member>
        <member name="P:FileHelpers.DataLink.FileDataLink.DataStorage">
            <summary> The internal <see cref="T:FileHelpers.DataLink.IDataLinkProvider"/> used to the link ops. </summary>
        </member>
        <member name="P:FileHelpers.DataLink.FileDataLink.LastExtractedRecords">
            <summary>
            An array of the last records extracted from the data source to a file.
            </summary>
        </member>
        <member name="P:FileHelpers.DataLink.FileDataLink.LastInsertedRecords">
            <summary>
            An array of the last records inserted in the data source that comes from a file.
            </summary>
        </member>
        <member name="T:FileHelpers.MasterDetail.MasterDetails">
            <summary>
            <para>This class contains information of a Master record an their Details records.</para>
            <para>This class is used for the Read and Write operations of the <see cref="T:FileHelpers.MasterDetail.MasterDetailEngine"/>.</para>
            </summary>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetails.#ctor">
            <summary>Create an empty instance.</summary>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetails.#ctor(System.Object,System.Object[])">
            <summary>Create a new instance with the specified values.</summary>
            <param name="master">The master record.</param>
            <param name="details">The details record.</param>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails.Empty">
            <summary>Returns a canonical empty MasterDetail object.</summary>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails.Master">
            <summary>The Master record.</summary>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails.Details">
            <summary>An Array with the Detail records.</summary>
        </member>
        <member name="T:FileHelpers.MasterDetail.MasterDetailSelector">
            <summary>
            Delegate thats determines the Type of the current record (Master, Detail, Skip)
            </summary>
            <param name="recordString">The string of the current record.</param>
            <returns>the action used for the current record (Master, Detail, Skip)</returns>
        </member>
        <member name="T:FileHelpers.MasterDetail.CommonSelector">
            <summary>The Action taken when the selector string is found.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.MasterIfContains">
            <summary>Parse the current record as <b>Master</b> if the selector string is found.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.MasterIfBegins">
            <summary>Parse the current record as <b>Master</b> if the record starts with some string.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.MasterIfEnds">
            <summary>Parse the current record as <b>Master</b> if the record ends with some string.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.MasterIfEnclosed">
            <summary>Parse the current record as <b>Master</b> if the record begins and ends with some string.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.DetailIfContains">
            <summary>Parse the current record as <b>Detail</b> if the selector string is found.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.DetailIfBegins">
            <summary>Parse the current record as <b>Detail</b> if the record starts with some string.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.DetailIfEnds">
            <summary>Parse the current record as <b>Detail</b> if the record ends with some string.</summary>
        </member>
        <member name="F:FileHelpers.MasterDetail.CommonSelector.DetailIfEnclosed">
            <summary>Parse the current record as <b>Detail</b> if the record begins and ends with some string.</summary>
        </member>
        <member name="T:FileHelpers.FileHelpersException">
            <summary>Base class for all the library Exceptions.</summary>
        </member>
        <member name="M:FileHelpers.FileHelpersException.#ctor(System.String)">
            <summary>Basic constructor of the exception.</summary>
            <param name="message">Message of the exception.</param>
        </member>
        <member name="M:FileHelpers.FileHelpersException.#ctor(System.String,System.Exception)">
            <summary>Basic constructor of the exception.</summary>
            <param name="message">Message of the exception.</param>
            <param name="innerEx">The inner Exception.</param>
        </member>
        <member name="T:FileHelpers.BadUsageException">
            <summary>Indicates the wrong usage of the library.</summary>
        </member>
        <member name="M:FileHelpers.BadUsageException.#ctor(System.String)">
            <summary>Creates an instance of an BadUsageException.</summary>
            <param name="message">The exception Message</param>
        </member>
        <member name="T:FileHelpers.FileTransformEngine`2">
            <summary>
            This class allow you to convert the records of a file to a different record format.
            </summary>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="class_diagram.html">Class Diagram</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
            <seealso href="example_datalink.html">Example of the DataLink</seealso>
            <seealso href="attributes.html">Attributes List</seealso>
        </member>
        <member name="M:FileHelpers.FileTransformEngine`2.#ctor">
            <summary>Create a new instance of the class.</summary>
            <param name="sourceType">The source record Type.</param>
            <param name="destType">The destination record Type.</param>
        </member>
        <member name="M:FileHelpers.FileTransformEngine`2.TransformFile(System.String,System.String)">
            <summary>Transform the contents of the sourceFile and write them to the destFile.(use only if you need the array of the transformed records, TransformFileAsync is faster)</summary>
            <param name="sourceFile">The source file.</param>
            <param name="destFile">The destination file.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine`2.TransformFileAsync(System.String,System.String)">
            <summary>Transform the contents of the sourceFile and write them to the destFile. (faster and use less memory, best choice for big files)</summary>
            <param name="sourceFile">The source file.</param>
            <param name="destFile">The destination file.</param>
            <returns>The number of transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine`2.TransformRecords(`0[])">
            <summary>Transform an array of records from the source type to the destination type</summary>
            <param name="sourceRecords">An array of the source records.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine`2.ReadAndTransformRecords(System.String)">
            <summary>Transform a file that contains source records to an array of the destination type</summary>
            <param name="sourceFile">A file containing the source records.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="P:FileHelpers.FileTransformEngine`2.SourceType">
            <summary>The source record Type.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine`2.DestinationType">
            <summary>The destination record Type.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine`2.SourceEncoding">
            <summary>The Encoding of the Source File.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine`2.DestinationEncoding">
            <summary>The Encoding of the Destination File.</summary>
        </member>
        <member name="T:FileHelpers.DelimitedFileEngine">
            <summary>
            Is a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            delimited records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with 2 or more different delimiters or little different options.
            </remarks>
        </member>
        <member name="T:FileHelpers.FileHelperEngine">
            <summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsable to Read/Write the records <b>at once</b> from/to files or streams.</para>
			<para>You can use the <see cref="T:FileHelpers.DelimitedFileEngine"/> or the <see cref="T:FileHelpers.FixedFileEngine"/> if you need to change some options at runtime</para>
		</summary><remarks>
		 <para>You can set the <see cref="P:FileHelpers.ErrorManager.ErrorMode"/> of this class when found an error, and can retrive them with the <see cref="P:FileHelpers.ErrorManager.Errors"/> property.</para>
		 <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="quick_start.html">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="examples.html">Examples Seccion</a> for more code.</para>
		 <para>Engines Diagram:</para>
		 <para><center><img src="diag_engines.gif"/></center></para>
		</remarks><seealso href="quick_start.html">Quick Start Guide</seealso><seealso href="class_diagram.html">Class Diagram</seealso><seealso href="examples.html">Examples of Use</seealso><seealso href="attributes.html">Attributes List</seealso>
            <example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

	
	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
</code>		</example>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.#ctor(System.Type)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.#ctor(System.Type,System.Text.Encoding)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
            <param name="encoding">The Encoding used by the engine.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadFile(System.String)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadFile(System.String,System.Int32)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStream(System.IO.TextReader)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStream(System.IO.TextReader,System.Int32)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadString(System.String)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadString(System.String,System.Int32)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteFile(System.String,System.Collections.IEnumerable)">
            <summary>
		Write an array of records to the specified file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteFile(System.String,System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write the specified number of records from the array to a file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteStream(System.IO.TextWriter,System.Collections.IEnumerable)">
            <summary>
		Write an array of records to the specified Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteStream(System.IO.TextWriter,System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write the specified number of records in the array to the Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteString(System.Collections.IEnumerable)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.WriteString(System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.AppendToFile(System.String,System.Object)">
            <summary>
		Append a record to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="record">The record to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.AppendToFile(System.String,System.Collections.IEnumerable)">
            <summary>
		Append an array of records to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadFileAsDT(System.String)">
            <summary>
            Read the records of the file and fill a DataTable with them
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadFileAsDT(System.String,System.Int32)">
            <summary>
            Read the records of the file and fill a DataTable with them
            </summary>
            <param name="fileName">The file name.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStringAsDT(System.String)">
            <summary>
            Read the records of a string and fill a DataTable with them.
            </summary>
            <param name="source">The source string with the records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStringAsDT(System.String,System.Int32)">
            <summary>
            Read the records of a string and fill a DataTable with them.
            </summary>
            <param name="source">The source string with the records.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStreamAsDT(System.IO.TextReader)">
            <summary>
            Read the records of the stream and fill a DataTable with them
            </summary>
            <param name="reader">The stream with the source records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine.ReadStreamAsDT(System.IO.TextReader,System.Int32)">
            <summary>
            Read the records of the stream and fill a DataTable with them
            </summary>
            <param name="reader">The stream with the source records.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="E:FileHelpers.FileHelperEngine.BeforeReadRecord">
            <summary>Called in read operations just before the record string is translated to a record.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine.AfterReadRecord">
            <summary>Called in read operations just after the record was created from a record string.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine.BeforeWriteRecord">
            <summary>Called in write operations just before the record is converted to a string to write it.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine.AfterWriteRecord">
            <summary>Called in write operations just after the record was converted to a string.</summary>
        </member>
        <member name="P:FileHelpers.FileHelperEngine.Options">
            <summary>
            Allows to change some record layout options at runtime
            </summary>
        </member>
        <member name="M:FileHelpers.DelimitedFileEngine.#ctor(System.Type)">
            <summary>
            Create a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            delimited records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with 2 or more different delimiters.
            </remarks>
            <param name="recordType">The record mapping class.</param>
        </member>
        <member name="P:FileHelpers.DelimitedFileEngine.Options">
            <summary>Allow changes in the record layout like delimiters and others common settings.</summary>
        </member>
        <member name="T:FileHelpers.DelimitedFileEngine`1">
            <summary>
            Is a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            delimited records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with 2 or more different delimiters or little different options.
            </remarks>
        </member>
        <member name="T:FileHelpers.FileHelperEngine`1">
            <summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsable to Read/Write the records <b>at once</b> from/to files or streams.</para>
			<para>You can use the <see cref="T:FileHelpers.DelimitedFileEngine"/> or the <see cref="T:FileHelpers.FixedFileEngine"/> if you need to change some options at runtime</para>
		</summary><remarks>
		 <para>You can set the <see cref="P:FileHelpers.ErrorManager.ErrorMode"/> of this class when found an error, and can retrive them with the <see cref="P:FileHelpers.ErrorManager.Errors"/> property.</para>
		 <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="quick_start.html">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="examples.html">Examples Seccion</a> for more code.</para>
		 <para>Engines Diagram:</para>
		 <para><center><img src="diag_engines.gif"/></center></para>
		</remarks><seealso href="quick_start.html">Quick Start Guide</seealso><seealso href="class_diagram.html">Class Diagram</seealso><seealso href="examples.html">Examples of Use</seealso><seealso href="attributes.html">Attributes List</seealso>
            <example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

	
	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
</code>		</example>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.#ctor">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.#ctor(System.Text.Encoding)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
            <param name="encoding">The Encoding used by the engine.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadFile(System.String)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadFile(System.String,System.Int32)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStream(System.IO.TextReader)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStream(System.IO.TextReader,System.Int32)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadString(System.String)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadString(System.String,System.Int32)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteFile(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
		Write an array of records to the specified file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteFile(System.String,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
		Write the specified number of records from the array to a file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteStream(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0})">
            <summary>
		Write an array of records to the specified Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteStream(System.IO.TextWriter,System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
		Write the specified number of records in the array to the Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteString(System.Collections.Generic.IEnumerable{`0})">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.WriteString(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.AppendToFile(System.String,`0)">
            <summary>
		Append a record to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="record">The record to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.AppendToFile(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
		Append an array of records to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadFileAsDT(System.String)">
            <summary>
            Read the records of the file and fill a DataTable with them
            </summary>
            <param name="fileName">The file name.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadFileAsDT(System.String,System.Int32)">
            <summary>
            Read the records of the file and fill a DataTable with them
            </summary>
            <param name="fileName">The file name.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStringAsDT(System.String)">
            <summary>
            Read the records of a string and fill a DataTable with them.
            </summary>
            <param name="source">The source string with the records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStringAsDT(System.String,System.Int32)">
            <summary>
            Read the records of a string and fill a DataTable with them.
            </summary>
            <param name="source">The source string with the records.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStreamAsDT(System.IO.TextReader)">
            <summary>
            Read the records of the stream and fill a DataTable with them
            </summary>
            <param name="reader">The stream with the source records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperEngine`1.ReadStreamAsDT(System.IO.TextReader,System.Int32)">
            <summary>
            Read the records of the stream and fill a DataTable with them
            </summary>
            <param name="reader">The stream with the source records.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The DataTable with the read records.</returns>
        </member>
        <member name="E:FileHelpers.FileHelperEngine`1.BeforeReadRecord">
            <summary>Called in read operations just before the record string is translated to a record.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine`1.AfterReadRecord">
            <summary>Called in read operations just after the record was created from a record string.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine`1.BeforeWriteRecord">
            <summary>Called in write operations just before the record is converted to a string to write it.</summary>
        </member>
        <member name="E:FileHelpers.FileHelperEngine`1.AfterWriteRecord">
            <summary>Called in write operations just after the record was converted to a string.</summary>
        </member>
        <member name="P:FileHelpers.FileHelperEngine`1.Options">
            <summary>
            Allows to change some record layout options at runtime
            </summary>
        </member>
        <member name="M:FileHelpers.DelimitedFileEngine`1.#ctor">
            <summary>
            Create a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            delimited records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with 2 or more different delimiters.
            </remarks>
        </member>
        <member name="P:FileHelpers.DelimitedFileEngine`1.Options">
            <summary>Allow changes in the record layout like delimiters and others common settings.</summary>
        </member>
        <member name="T:FileHelpers.RecordInfo">
            <summary>An internal class used to store information about the Record Type.</summary>
            <remarks>Is public to provide extensibility of DataSorage from outside the library.</remarks>
        </member>
        <member name="M:FileHelpers.RecordInfo.#ctor(System.Type)">
            <summary>The unique constructor for this class. It needs the subyacent record class.</summary>
            <param name="recordType">The Type of the record class.</param>
        </member>
        <member name="M:FileHelpers.RecordInfo.ValuesToRecord(System.Object[])">
            <summary>Returns a record formed with the passed values.</summary>
            <param name="values">The source Values.</param>
            <returns>A record formed with the passed values.</returns>
        </member>
        <member name="M:FileHelpers.RecordInfo.RecordToValues(System.Object)">
            <summary>Get an object[] of the values in the fields of the passed record.</summary>
            <param name="record">The source record.</param>
            <returns>An object[] of the values in the fields.</returns>
        </member>
        <member name="T:FileHelpers.IgnoreFirstAttribute">
            <summary>Indicates the number of first lines to be discarded.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.IgnoreFirstAttribute.#ctor">
            <summary>Indicates that the first line must be discarded.</summary>
        </member>
        <member name="M:FileHelpers.IgnoreFirstAttribute.#ctor(System.Int32)">
            <summary>Indicates the number of first lines to be ignored.</summary>
            <param name="numberOfLines">The number of first lines to be discarded.</param>
        </member>
        <member name="T:FileHelpers.FieldNullValueAttribute">
            <summary>Indicates the value to assign to the field in the case of find a "NULL".</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldNullValueAttribute.#ctor(System.Object)">
            <summary>Indicates directly the null value.</summary>
            <param name="nullValue">The value to assign in the "NULL" case.</param>
        </member>
        <member name="M:FileHelpers.FieldNullValueAttribute.#ctor(System.Type,System.String)">
            <summary>Indicates a type and a string to be converted to that type.</summary>
            <param name="type">The type of the null value.</param>
            <param name="nullValue">The string to be converted to the specified type.</param>
        </member>
        <member name="T:FileHelpers.RunTime.FixedLengthClassBuilder">
            <summary>Used to create classes that maps to Fixed Length records.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.ClassBuilder">
            <summary>The MAIN class to work with runtime defined records.</summary>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromString(System.String)">
            <summary>Compiles the source code passed and returns the FIRST Type of the assembly. (Code in C#)</summary>
            <param name="classStr">The Source Code of the class in C#</param>
            <returns>The Type generated by runtime compilation of the class source.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromString(System.String,FileHelpers.NetLanguage)">
            <summary>Compiles the source code passed and returns the FIRST Type of the assembly.</summary>
            <param name="classStr">The Source Code of the class in the specified language</param>
            <returns>The Type generated by runtime compilation of the class source.</returns>
            <param name="lang">One of the .NET Languages</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromString(System.String,System.String)">
            <summary>Compiles the source code passed and returns the Type with the name className. (Code in C#)</summary>
            <param name="classStr">The Source Code of the class in C#</param>
            <param name="className">The Name of the Type that must be returned</param>
            <returns>The Type generated by runtime compilation of the class source.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromString(System.String,System.String,FileHelpers.NetLanguage)">
            <summary>Compiles the source code passed and returns the Type with the name className.</summary>
            <param name="classStr">The Source Code of the class in the specified language</param>
            <param name="className">The Name of the Type that must be returned</param>
            <returns>The Type generated by runtime compilation of the class source.</returns>
            <param name="lang">One of the .NET Languages</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromSourceFile(System.String)">
            <summary>
            Create a class from a source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromSourceFile(System.String,FileHelpers.NetLanguage)">
            <summary>
            Create a class from a source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <param name="lang">The languaje used to compile the class.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromSourceFile(System.String,System.String)">
            <summary>
            Create a class from a source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <param name="className">The name of the class to return.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromSourceFile(System.String,System.String,FileHelpers.NetLanguage)">
            <summary>
            Create a class from a source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <param name="className">The name of the class to return.</param>
            <param name="lang">The languaje used to compile the class.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromBinaryFile(System.String)">
            <summary>
            Create a class from a encripted source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromBinaryFile(System.String,FileHelpers.NetLanguage)">
            <summary>
            Create a class from a encripted source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <param name="lang">The languaje used to compile the class.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromBinaryFile(System.String,System.String,FileHelpers.NetLanguage)">
            <summary>
            Create a class from a encripted source file.
            </summary>
            <param name="filename">The filename with the source of the class.</param>
            <param name="lang">The languaje used to compile the class.</param>
            <param name="className">The name of the class to return.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassFromXmlFile(System.String)">
            <summary>
            Create a class from a Xml file generated with the Wizard or saved using the SaveToXml Method.
            </summary>
            <param name="filename">The filename with the Xml definition.</param>
            <returns>The compiled class.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClassToBinaryFile(System.String,System.String)">
            <summary>
            Encript the class source code and write it to a file.
            </summary>
            <param name="filename">The file name to write to.</param>
            <param name="classSource">The source code for the class.</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.SaveToSourceFile(System.String)">
            <summary>Write the source code of the current class to a file. (In C#)</summary>
            <param name="filename">The file to write to.</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.SaveToSourceFile(System.String,FileHelpers.NetLanguage)">
            <summary>Write the source code of the current class to a file. (In the especified language)</summary>
            <param name="filename">The file to write to.</param>
            <param name="lang">The .NET Language used to write the source code.</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.SaveToBinaryFile(System.String)">
            <summary>Write the ENCRIPTED source code of the current class to a file. (In C#)</summary>
            <param name="filename">The file to write to.</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.SaveToBinaryFile(System.String,FileHelpers.NetLanguage)">
            <summary>Write the ENCRIPTED source code of the current class to a file. (In C#)</summary>
            <param name="filename">The file to write to.</param>
            <param name="lang">The .NET Language used to write the source code.</param>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.CreateRecordClass">
            <summary>Generate the runtime record class to be used by the engines.</summary>
            <returns>The generated record class</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.ClearFields">
            <summary>Removes all the Fields of the current class.</summary>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.FieldByIndex(System.Int32)">
            <summary>Return the field at the specified index.</summary>
            <param name="index">The index of the field.</param>
            <returns>The field at the specified index.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.GetClassBinaryCode(FileHelpers.NetLanguage)">
            <summary>
            Returns the ENCRIPTED code for the current class in the specified language.
            </summary>
            <param name="lang">The language for the return code.</param>
            <returns>The ENCRIPTED code for the class that are currently building.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.GetClassSourceCode(FileHelpers.NetLanguage)">
            <summary>
            Returns the source code for the current class in the specified language.
            </summary>
            <param name="lang">The language for the return code.</param>
            <returns>The Source Code for the class that are currently building.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.LoadFromXml(System.String)">
            <summary>
            Loads and return a ClassBuilder inheritor that has been saved with the SaveToXml method
            </summary>
            <param name="filename">A file name with the ClassBuilder difinition.</param>
            <returns>A new instance of a ClassBuilder inheritor.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.ClassBuilder.SaveToXml(System.String)">
            <summary>
            Creates a custom serialization of the current ClassBuilder
            </summary>
            <param name="filename">A file name to write to.</param>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.Fields">
            <summary>Returns the current fields of the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.FieldCount">
            <summary>Returns the current number of fields.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.ClassName">
            <summary>The name of the Class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreFirstLines">
            <summary>Indicates the number of FIRST LINES to be ignored by the engines.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreLastLines">
            <summary>Indicates the number of LAST LINES to be ignored by the engines.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreEmptyLines">
            <summary>Indicates that the engines must ignore the empty lines in the files.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.GenerateProperties">
            <summary>Indicates if this ClassBuilder generates also the property accessors (Perfect for DataBinding)</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.Visibility">
            <summary>The Visibility for the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.SealedClass">
            <summary>Indicates if the generated class must be sealed.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.Namespace">
            <summary>The namespace used when creating the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.RecordCondition">
            <summary>Allow to tell the engine what records must be included or excluded while reading.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreCommentedLines">
            <summary>Indicates that the engine must ignore the lines with this comment marker.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.ClassBuilder.RecordConditionInfo">
            <summary>Allow to tell the engine what records must be included or excluded while reading.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.RecordConditionInfo.Condition">
            <summary>Allow to tell the engine what records must be included or excluded while reading.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.RecordConditionInfo.Selector">
            <summary>The selector used by the <see cref="P:FileHelpers.RunTime.ClassBuilder.RecordCondition"/>.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.ClassBuilder.IgnoreCommentInfo">
            <summary>Indicates that the engine must ignore the lines with this comment marker.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreCommentInfo.CommentMarker">
            <summary>
            <para>Indicates that the engine must ignore the lines with this comment marker.</para>
            <para>An emty string or null indicates that the engine dont look for comments</para>
            </summary>
        </member>
        <member name="P:FileHelpers.RunTime.ClassBuilder.IgnoreCommentInfo.InAnyPlace">
            <summary>Indicates if the comment can have spaces or tabs at left (true by default)</summary>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.FieldByIndex(System.Int32)">
            <summary>Return the field at the specified index.</summary>
            <param name="index">The index of the field.</param>
            <returns>The field at the specified index.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.#ctor(System.String)">
            <summary>Used to create classes that maps to Fixed Length records.</summary>
            <param name="className">A valid class name.</param>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.#ctor(System.String,System.Int32[])">
            <summary>Used to create classes that maps to Fixed Length records and automatic instanciate many string fields as values are passed in the lengths arg. </summary>
            <param name="className">A valid class name.</param>
            <param name="lengths">The lengths of the fields (one string field will be create for each length)</param>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.#ctor(System.String,System.Data.DataTable,System.Int32)">
            <summary>Used to create classes that maps to Fixed Length records with the same structure than a DataTable.</summary>
            <param name="className">A valid class name.</param>
            <param name="dt">The DataTable from where to get the field names and types</param>
            <param name="defaultLength">The initial length of all fields</param>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.#ctor(System.String,FileHelpers.FixedMode)">
            <summary>Used to create classes that maps to Fixed Length records.</summary>
            <param name="className">A valid class name.</param>
            <param name="mode">Indicates the behavior when variable length records are found.</param>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.AddField(System.String,System.Int32,System.String)">
            <summary>Adds a new Fixed Length field.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="length">The length of the field.</param>
            <param name="fieldType">The Type of the field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.AddField(System.String,System.Int32,System.Type)">
            <summary>Adds a new Fixed Length field.</summary>
            <param name="fieldName">The name of the field.</param>
            <param name="length">The length of the field.</param>
            <param name="fieldType">The Type of the field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.AddField(FileHelpers.RunTime.FixedFieldBuilder)">
            <summary>Adds a new Fixed Length field.</summary>
            <param name="field">The field definition.</param>
            <returns>The just added field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.FixedLengthClassBuilder.SetFieldsLength(System.Int32[])">
            <summary>
            Set the length of each field at once.
            </summary>
            <param name="lengths">The length of each field, must be the same that the number of fields.</param>
        </member>
        <member name="P:FileHelpers.RunTime.FixedLengthClassBuilder.Fields">
            <summary>Returns the current fields of the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FixedLengthClassBuilder.LastField">
            <summary>Return the last added field. (use it reduce casts and code)</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FixedLengthClassBuilder.FixedMode">
            <summary>Indicates the behavior when variable length records are found </summary>
        </member>
        <member name="T:FileHelpers.RunTime.ConverterBuilder">
            <summary>Used to build the ConverterAttribute for the run time classes.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ConverterBuilder.Kind">
            <summary>The ConverterKind to be used , like the one in the FieldConverterAttribute.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ConverterBuilder.TypeName">
            <summary>The type name of your custom converter.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ConverterBuilder.Arg1">
            <summary>The first argument pased to the converter.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ConverterBuilder.Arg2">
            <summary>The first argument pased to the converter.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.ConverterBuilder.Arg3">
            <summary>The first argument pased to the converter.</summary>
        </member>
        <member name="T:FileHelpers.RecordOptions">
            <summary>
            This class allows you to set some options of the records but at runtime.
            With this options the library is more flexible than never.
            </summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreFirstLines">
            <summary>Indicates the number of first lines to be discarded.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreLastLines">
            <summary>Indicates the number of lines at the end of file to be discarded.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreEmptyLines">
            <summary>Indicates that the engine must ignore the empty lines while reading.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.RecordCondition">
            <summary>Allow to tell the engine what records must be included or excluded while reading.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreCommentedLines">
            <summary>Indicates that the engine must ignore the lines with this comment marker.</summary>
        </member>
        <member name="T:FileHelpers.RecordOptions.RecordConditionInfo">
            <summary>Allow to tell the engine what records must be included or excluded while reading.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.RecordConditionInfo.Condition">
            <summary>The condition used to include or exclude records.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.RecordConditionInfo.Selector">
            <summary>The selector used by the <see cref="P:FileHelpers.RecordOptions.RecordCondition"/>.</summary>
        </member>
        <member name="T:FileHelpers.RecordOptions.IgnoreCommentInfo">
            <summary>Indicates that the engine must ignore the lines with this comment marker.</summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreCommentInfo.CommentMarker">
            <summary>
            <para>Indicates that the engine must ignore the lines with this comment marker.</para>
            <para>An emty string or null indicates that the engine dont look for comments</para>
            </summary>
        </member>
        <member name="P:FileHelpers.RecordOptions.IgnoreCommentInfo.InAnyPlace">
            <summary>Indicates if the comment can have spaces or tabs at left (true by default)</summary>
        </member>
        <member name="T:FileHelpers.IComparableRecord">
            <summary>Used by the FileDiffEngine to compare records. Your record class must implement this interface if you like to work with it.</summary>
        </member>
        <member name="M:FileHelpers.IComparableRecord.IsEqualRecord(System.Object)">
            <summary>
            Compare two records and return true if are equal.
            </summary>
            <param name="record">The other record.</param>
            <returns>Returns true only if the records are equals.</returns>
        </member>
        <member name="T:FileHelpers.CsvOptions">
            <summary>Class used to pass information to the <see cref="T:FileHelpers.RunTime.CsvClassBuilder"/> and the <see cref="T:FileHelpers.CsvEngine"/></summary>
        </member>
        <member name="M:FileHelpers.CsvOptions.#ctor(System.String,System.Char,System.Int32)">
            <summary>Create a Csv Wrapper using the specified number of fields.</summary>
            <param name="className">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="numberOfFields">The number of fields of each record</param>
        </member>
        <member name="M:FileHelpers.CsvOptions.#ctor(System.String,System.Char,System.String)">
            <summary>Create a Csv Wrapper using the specified sample file with their headers.</summary>
            <param name="className">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="sampleFile">A sample file with a header that contains the names of the fields.</param>
        </member>
        <member name="P:FileHelpers.CsvOptions.SampleFileName">
            <summary>A sample file from where to read the field names and number.</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.Delimiter">
            <summary>The delimiter for each field.</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.HeaderDelimiter">
            <summary>The delimiter for each fiel name in the header.</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.RecordClassName">
            <summary>The name used for the record class (a valid .NET class).</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.FieldsPrefix">
            <summary>The prefix used when you only specified the number of fields</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.NumberOfFields">
            <summary>The number of fields that the file contains.</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.HeaderLines">
            <summary>The number of header lines</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.DateFormat">
            <summary>The DateFormat used to read and write datetime values</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.DecimalSeparator">
            <summary>The Decimal Separator used to read and write doubles, singles and decimal values</summary>
        </member>
        <member name="P:FileHelpers.CsvOptions.Encoding">
            <summary>
            Encoding used when handling the CSV files.
            </summary>
        </member>
        <member name="T:FileHelpers.RunTime.RunTimeCompilationException">
            <summary>
            Exception with error information of the run time compilation.
            </summary>
        </member>
        <member name="P:FileHelpers.RunTime.RunTimeCompilationException.SourceCode">
            <summary>
            The source code that generates the Exception
            </summary>
        </member>
        <member name="P:FileHelpers.RunTime.RunTimeCompilationException.CompilerErrors">
            <summary>
            The errors returned from the compiler.
            </summary>
        </member>
        <member name="T:FileHelpers.QuoteMode">
            <summary>Indicates the behavior of quoted fields.</summary>
        </member>
        <member name="F:FileHelpers.QuoteMode.AlwaysQuoted">
            <summary>The engine always expects a quote when read and always adds the quotes when write.</summary>
        </member>
        <member name="F:FileHelpers.QuoteMode.OptionalForRead">
            <summary>The engine expects or not a quote when read and always adds the quotes when write.</summary>
        </member>
        <member name="F:FileHelpers.QuoteMode.OptionalForWrite">
            <summary>The engine always expects a quote when read and adds the quotes when write only if the field contains: quotes, new lines or the separator char.</summary>
        </member>
        <member name="F:FileHelpers.QuoteMode.OptionalForBoth">
            <summary>The engine expects or not a quote when read and adds the quotes when write only if the field contains: quotes, new lines or the separator char.</summary>
        </member>
        <member name="T:FileHelpers.DataLink.FileStorage">
            <summary>This class implements the <see cref="T:FileHelpers.DataLink.DataStorage"/> for plain text files.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.FileStorage.#ctor(System.Type,System.String)">
            <summary>Create an instance of this class to work with the specified type.</summary>
            <param name="type">The record class.</param>
            <param name="fileName">The target filename.</param>
        </member>
        <member name="M:FileHelpers.DataLink.FileStorage.ExtractRecords">
            <summary>Must Return the records from the DataSource (DB, Excel, etc)</summary>
            <returns>The extracted records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.FileStorage.InsertRecords(System.Object[])">
            <summary>Must Insert the records in a DataSource (DB, Excel, etc)</summary>
            <param name="records">The records to insert.</param>
        </member>
        <member name="P:FileHelpers.DataLink.FileStorage.Engine">
            <summary>The engine behind the FileStorage.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.FileStorage.FileName">
            <summary>The target file name.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.DelimitedFieldBuilder">
            <summary>Used to create fields that are part of a dilimited record class.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.FieldBuilder">
            <summary>Base class for the field converters</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.TrimMode">
            <summary>Indicates the TrimMode for the field.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.TrimChars">
            <summary>Indicates the trim chars used if TrimMode is set.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldIndex">
            <summary>The position index inside the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldInNewLine">
            <summary>Indicates that this field is at the begging of a new line.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldIgnored">
            <summary>Indicates that this field must be ignored by the engine.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldOptional">
            <summary>Indicates that this field is optional.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.Converter">
            <summary>Uset to create the converter for the current field.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldName">
            <summary>The name of the field.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldType">
            <summary>The Type of the field</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.FieldNullValue">
            <summary>The null value of the field when their value not is in the file.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FieldBuilder.Visibility">
            <summary>
            Gets or sets the visibility of the field.
            </summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedFieldBuilder.FieldQuoted">
            <summary>Indicates if the field is quoted with some char. (works with QuoteMode and QuoteChar)</summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedFieldBuilder.QuoteChar">
            <summary>Indicates the char used to quote this field. (only used when FieldQuoted is true)</summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedFieldBuilder.QuoteMode">
            <summary>Indicates the QuoteMode for this field. (only used when FieldQuoted is true)</summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedFieldBuilder.QuoteMultiline">
            <summary>Indicates if this quoted field can span multiple lines. (only used when FieldQuoted is true)</summary>
        </member>
        <member name="T:FileHelpers.FixedRecordOptions">
            <summary>
            This class allows you to set some options of the fixed length records but at runtime.
            With this options the library is more flexible than never.
            </summary>
        </member>
        <member name="P:FileHelpers.FixedRecordOptions.FixedMode">
            <summary>Indicates the behavior when variable length records are found in a [<see cref="T:FileHelpers.FixedLengthRecordAttribute"/>]. (Note: nothing in common with [FieldOptional])</summary>
        </member>
        <member name="P:FileHelpers.FixedRecordOptions.RecordLength">
            <summary>
            The sum of the indivial field lengths.
            </summary>
        </member>
        <member name="T:FileHelpers.ErrorManager">
            <summary>This is the class that handles the errors of the engines process.</summary>
            <remarks>All the engines and DataStorages contains a ErrorManager.</remarks>
        </member>
        <member name="M:FileHelpers.ErrorManager.#ctor">
            <summary>Initializes a new instance of the <see cref="T:FileHelpers.ErrorManager"/> class.</summary>
        </member>
        <member name="M:FileHelpers.ErrorManager.#ctor(FileHelpers.ErrorMode)">
            <summary>Initializes a new instance of the <see cref="T:FileHelpers.ErrorManager"/> class. with the specified <see cref="P:FileHelpers.ErrorManager.ErrorMode"/>.</summary>
            <param name="mode">Indicates the error behavior of the class.</param>
        </member>
        <member name="M:FileHelpers.ErrorManager.ClearErrors">
            <summary>Clears the error collection.</summary>
        </member>
        <member name="M:FileHelpers.ErrorManager.AddError(FileHelpers.ErrorInfo)">
            <summary>Add the specified ErrorInfo to the contained collection.</summary>
            <param name="error"></param>
        </member>
        <member name="M:FileHelpers.ErrorManager.AddErrors(FileHelpers.ErrorManager)">
            <summary>Add the specified ErrorInfo to the contained collection.</summary>
        </member>
        <member name="M:FileHelpers.ErrorManager.SaveErrors(System.String)">
            <summary>Saves the contained errors to the specified file.</summary>
            <param name="fileName">The file that contains the errors.</param>
        </member>
        <member name="M:FileHelpers.ErrorManager.SaveErrors(System.String,System.String)">
            <summary>Saves the contained errors to the specified file.</summary>
            <param name="fileName">The file that contains the errors.</param>
            <param name="header">The header line of the errors file.</param>
        </member>
        <member name="M:FileHelpers.ErrorManager.LoadErrors(System.String)">
            <summary>Load errors from a file.</summary>
            <param name="fileName">The file that contains the errors.</param>
        </member>
        <member name="P:FileHelpers.ErrorManager.Errors">
            <summary>Is an array of <see cref="T:FileHelpers.ErrorInfo"/> that contains the errors of the last operation in this class.</summary>
        </member>
        <member name="P:FileHelpers.ErrorManager.ErrorMode">
            <summary>Indicates the behavior of the <see cref="T:FileHelpers.FileHelperEngine"/> when it found an error.</summary>
        </member>
        <member name="P:FileHelpers.ErrorManager.ErrorCount">
            <summary>Number of contained errors.</summary>
        </member>
        <member name="P:FileHelpers.ErrorManager.HasErrors">
            <summary>Indicates if contains one or more errors.</summary>
        </member>
        <member name="T:FileHelpers.ProgressMode">
            <summary>Indicate the method used to calculate the current progress</summary>
        </member>
        <member name="F:FileHelpers.ProgressMode.NotifyPercent">
            <summary>Notify the percent completed.</summary>
        </member>
        <member name="F:FileHelpers.ProgressMode.NotifyRecords">
            <summary>Notify the Record completed.</summary>
        </member>
        <member name="F:FileHelpers.ProgressMode.NotifyBytes">
            <summary>Notify the bytes readed.</summary>
        </member>
        <member name="F:FileHelpers.ProgressMode.DontNotify">
            <summary>Dont call to the progress handler.</summary>
        </member>
        <member name="T:FileHelpers.FixedLengthRecordAttribute">
            <summary>Indicates that this class represents a fixed length record.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FixedLengthRecordAttribute.#ctor">
            <summary>Indicates that this class represents a fixed length record. By default requieres that the records has the length equals to the sum of each field length.</summary>
        </member>
        <member name="M:FileHelpers.FixedLengthRecordAttribute.#ctor(FileHelpers.FixedMode)">
            <summary>Indicates that this class represents a fixed length record with the specified variable record behavior.</summary>
            <param name="mode">The <see cref="T:FileHelpers.FixedMode"/> used for variable length records.</param>
        </member>
        <member name="T:FileHelpers.FieldIgnoredAttribute">
            <summary>Indicates that the target field is completely ignored by the Engine (i.e. This field donÂ´t exists for the library).</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldIgnoredAttribute.#ctor">
            <summary>Indicates that the target field is ignored by the Engine AND NOT IS IN THE FILE.</summary>
        </member>
        <member name="T:FileHelpers.RunTime.CsvClassBuilder">
            <summary>Used to create classes that maps to CSV records (can be quoted, multiplelined quoted, etc).</summary>
        </member>
        <member name="T:FileHelpers.RunTime.DelimitedClassBuilder">
            <summary>Used to create classes that maps to Delimited records.</summary>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.FieldByIndex(System.Int32)">
            <summary>Return the field at the specified index.</summary>
            <param name="index">The index of the field.</param>
            <returns>The field at the specified index.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.#ctor(System.String,System.String)">
            <summary>Creates a new DelimitedClassBuilder.</summary>
            <param name="className">The valid class name.</param>
            <param name="delimiter">The delimiter for that class.</param>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.#ctor(System.String)">
            <summary>Creates a new DelimitedClassBuilder.</summary>
            <param name="className">The valid class name.</param>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.#ctor(System.String,System.String,System.Data.DataTable)">
            <summary>Creates a new DelimitedClassBuilder with the same structure than a DataTable.</summary>
            <param name="className">The valid class name.</param>
            <param name="delimiter">The delimiter for that class.</param>
            <param name="dt">The DataTable from where to get the field names and types</param>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.AddField(System.String,System.String)">
            <summary>Add a new Delimited field to the current class.</summary>
            <param name="fieldName">The Name of the field.</param>
            <param name="fieldType">The Type of the field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.AddField(System.String,System.Type)">
            <summary>Add a new Delimited field to the current class.</summary>
            <param name="fieldName">The Name of the field.</param>
            <param name="fieldType">The Type of the field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.AddField(System.String)">
            <summary>Add a new Delimited string field to the current class.</summary>
            <param name="fieldName">The Name of the string field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.DelimitedClassBuilder.AddField(FileHelpers.RunTime.DelimitedFieldBuilder)">
            <summary>Add a new Delimited field to the current class.</summary>
            <param name="field">The field definition.</param>
            <returns>The just added field.</returns>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedClassBuilder.Delimiter">
            <summary>The Delimiter that marks the end of each field.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedClassBuilder.Fields">
            <summary>Returns the current fields of the class.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.DelimitedClassBuilder.LastField">
            <summary>Return the last added field. (use it reduce casts and code)</summary>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.#ctor(System.String,System.Char,System.String)">
            <summary>Creates a new DelimitedClassBuilder.</summary>
            <param name="className">The valid class name.</param>
            <param name="delimiter">The delimiter for that class.</param>
            <param name="sampleFile">A sample file from where to read the field names and number</param>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.#ctor(System.String,System.Char,System.Int32)">
            <summary>Creates a new DelimitedClassBuilder.</summary>
            <param name="className">The valid class name.</param>
            <param name="delimiter">The delimiter for that class.</param>
            <param name="numberOfFields">The number of fields in each record.</param>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.#ctor(FileHelpers.CsvOptions)">
            <summary>Creates a new DelimitedClassBuilder.</summary>
            <param name="options">The specifications for the Csv file.</param>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.AddField(System.String,System.String)">
            <summary>Add a new Delimited field to the current class.</summary>
            <param name="fieldName">The Name of the field.</param>
            <param name="fieldType">The Type of the field.</param>
            <returns>The just created field.</returns>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.AddFields(System.Int32)">
            <summary>
            Adds to the class the specified number of fileds.
            </summary>
            <param name="number">The number of fileds to add.</param>
        </member>
        <member name="M:FileHelpers.RunTime.CsvClassBuilder.AddFields(System.Int32,System.String)">
            <summary>
            Adds to the class the specified number of fileds.
            </summary>
            <param name="prefix">The prefix used for the fields.</param>
            <param name="number">The number of fileds to add.</param>
        </member>
        <member name="T:FileHelpers.NetLanguage">
            <summary>Indicates the .NET Language</summary>
        </member>
        <member name="F:FileHelpers.NetLanguage.CSharp">
            <summary>The C#.NET Language</summary>
        </member>
        <member name="F:FileHelpers.NetLanguage.VbNet">
            <summary>The VB.NET Language</summary>
        </member>
        <member name="T:FileHelpers.FixedMode">
            <summary>Indicates the behavior when variable length records are found in a [<see cref="T:FileHelpers.FixedLengthRecordAttribute"/>]. (Note: nothing in common with [FieldOptional])</summary>
        </member>
        <member name="F:FileHelpers.FixedMode.ExactLength">
            <summary>The records must have the length equals to the sum of each field length.</summary>
        </member>
        <member name="F:FileHelpers.FixedMode.AllowMoreChars">
            <summary>The records can contain less chars in the last field.</summary>
        </member>
        <member name="F:FileHelpers.FixedMode.AllowLessChars">
            <summary>The records can contain more chars in the last field.</summary>
        </member>
        <member name="F:FileHelpers.FixedMode.AllowVariableLength">
            <summary>The records can contain more or less chars in the last field.</summary>
        </member>
        <member name="T:FileHelpers.ErrorMode">
            <summary>Indicates the behavior when the <see cref="T:FileHelpers.FileHelperEngine"/> class found an error.</summary>
        </member>
        <member name="F:FileHelpers.ErrorMode.ThrowException">
            <summary>Default value, this simple Rethrow the original exception.</summary>
        </member>
        <member name="F:FileHelpers.ErrorMode.SaveAndContinue">
            <summary>Add an <see cref="T:FileHelpers.ErrorInfo"/> to the array of <see cref="P:FileHelpers.ErrorManager.Errors"/>.</summary>
        </member>
        <member name="F:FileHelpers.ErrorMode.IgnoreAndContinue">
            <summary>Simply ignores the exception an continue.</summary>
        </member>
        <member name="T:FileHelpers.CsvEngine">
            <summary>A class to read generic CSV files delimited for any char.</summary>
        </member>
        <member name="M:FileHelpers.CsvEngine.CsvToDataTable(System.String,System.Char)">
            <summary>Reads a Csv File and return their contents as DataTable (The file must have the field names in the first row)</summary>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CsvEngine.CsvToDataTable(System.String,System.String,System.Char)">
            <summary>Reads a Csv File and return their contents as DataTable (The file must have the field names in the first row)</summary>
            <param name="classname">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CsvEngine.CsvToDataTable(System.String,System.String,System.Char,System.Boolean)">
            <summary>Reads a Csv File and return their contents as DataTable</summary>
            <param name="classname">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <param name="hasHeader">Indicates if the file contains a header with the field names.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CsvEngine.CsvToDataTable(System.String,FileHelpers.CsvOptions)">
            <summary>Reads a Csv File and return their contents as DataTable</summary>
            <param name="filename">The file to read.</param>
            <param name="options">The options used to create the record mapping class.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CsvEngine.DataTableToCsv(System.Data.DataTable,System.String)">
            <summary>Simply dumps the DataTable contents to a delimited file using a ',' as delimiter.</summary>
            <param name="dt">The source Data Table</param>
            <param name="filename">The destination file.</param>
        </member>
        <member name="M:FileHelpers.CsvEngine.DataTableToCsv(System.Data.DataTable,System.String,FileHelpers.CsvOptions)">
            <summary>Simply dumps the DataTable contents to a delimited file. Only allows to set the delimiter.</summary>
            <param name="dt">The source Data Table</param>
            <param name="filename">The destination file.</param>
            <param name="options">The options used to write the file</param>
        </member>
        <member name="M:FileHelpers.CsvEngine.#ctor(System.String,System.Char,System.String)">
            <summary>Create a CsvEngine using the specified sample file with their headers.</summary>
            <param name="className">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="sampleFile">A sample file with a header that contains the names of the fields.</param>
        </member>
        <member name="M:FileHelpers.CsvEngine.#ctor(System.String,System.Char,System.Int32)">
            <summary>Create a CsvEngine using the specified number of fields.</summary>
            <param name="className">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="numberOfFields">The number of fields of each record</param>
        </member>
        <member name="M:FileHelpers.CsvEngine.#ctor(FileHelpers.CsvOptions)">
            <summary>Create a CsvEngine using the specified sample file with their headers.</summary>
            <param name="options">The options used to create the record mapping class.</param>
        </member>
        <member name="T:FileHelpers.DataLink.TransactionMode">
            <summary>
            Define the diferent Modes of Transaction that uses the <see cref="T:FileHelpers.DataLink.DatabaseStorage"/>
            </summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.NoTransaction">
            <summary>No transaction used.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseDefault">
            <summary>Default Transaction Mode.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseChaosLevel">
            <summary>Chaos Level Transaction Mode.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseReadCommitted">
            <summary>ReadCommitted Transaction Mode.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseReadUnCommitted">
            <summary>ReadUnCommitted Transaction Mode.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseRepeatableRead">
            <summary>Repeatable Transaction Mode.</summary>
        </member>
        <member name="F:FileHelpers.DataLink.TransactionMode.UseSerializable">
            <summary>Serializable Transaction Mode.</summary>
        </member>
        <member name="T:FileHelpers.FileHelperAsyncEngine`1">
            <summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsable to Read/Write the records <b>One by One</b> from/to files or streams.</para>
		</summary><remarks>
		 <para>You can set the <see cref="P:FileHelpers.ErrorManager.ErrorMode"/> of this class when found an error, and can retrive them with the <see cref="P:FileHelpers.ErrorManager.Errors"/> property.</para>
		 <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="quick_start.html">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="examples.html">Examples Seccion</a> for more code.</para>
		</remarks><seealso href="quick_start.html">Quick Start Guide</seealso><seealso href="class_diagram.html">Class Diagram</seealso><seealso href="examples.html">Examples of Use</seealso><seealso href="attributes.html">Attributes List</seealso>
            <example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

	
	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.#ctor">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.#ctor(System.Text.Encoding)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
            <param name="encoding">The encoding used by the Engine.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadStream(System.IO.TextReader)">
            <summary>
		Open a specified stream and seek to the first record.
		</summary><remarks>
		<para>This method only seek to the first record.</para>
		<para>To read record by record use <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.ReadNext"/></b> method.</para>
		<para>When you stop to read the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.Close"/></b> method.</para>
		</remarks><param name="reader">The TextReader of the stream.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadFile(System.String)">
            <summary>
		Open a specified file and seek to the first record.
		</summary><remarks>
		<para>This method only open the file.</para>
		<para>To read record by record use <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.ReadNext"/></b> method.</para>
		<para>When you stop to read the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be read.</param><returns>True if the file is succefully opened. False otherway.</returns><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadString(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="FileHelperAsyncEngine.docs.xml" path="doc/BeginReadString/*"/>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.ReadNext">
            <summary>
		Reads the next record of a file opened with the <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		<para>This method not only returns the current record, also moves to the next.</para>
		<para>If the end of file is reached this method return <b>null</b>.</para>
  	    </remarks><returns>The current record of the opened file.</returns><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.ReadNexts(System.Int32)">
            <summary>
		Reads the specified number of records from a file or stream opened with the <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		If there are less records in the source, read to the end.
  	    </remarks><param name="numberOfRecords">The number of records to read. If there are less records in the source, read to the end.</param><returns>The nexts records of the opened file or stream.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.Flush">
            <summary>
            Save all the buffered data for write to the disk. 
            Useful to long opened async engines that wants to save pending values or for engines used for logging.
            </summary>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.Close">
            <summary>
			Close all opened stream readers and writters (if any).
		</summary><remarks>
		<para>This method must be called when you finish to process a file to dispose the opened streams.</para>
  	    </remarks><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteStream(System.IO.TextWriter)">
            <summary>
		  Set the stream to be used in the <see cref="M:FileHelpers.FileHelperAsyncEngine`1.WriteNext(`0)"/> operation.
		</summary><remarks>
		<para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.Close"/></b> method.</para>
		</remarks><param name="writer">To stream to writes to.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteFile(System.String)">
            <summary>
		Open a file to write it. If exist the engine override it
		</summary><remarks>
		<para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be opened to write.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.BeginAppendToFile(System.String)">
            <summary>
		Open a file to Append to the end.
		</summary><remarks>
		<para>This method open and seek ends the file.</para>
		<para>When you finish to append to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine`1.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be opened to write at the end.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.WriteNext(`0)">
            <summary>
		Write the next record to a file or stream opened with <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginAppendToFile(System.String)"/> method.
		</summary><param name="record">The record to write.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.WriteNexts(System.Collections.Generic.IEnumerable{`0})">
            <summary>
		Write the nexts records to a file or stream opened with <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine`1.BeginAppendToFile(System.String)"/> method.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Allows to loop record by record in the engine</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.System#IDisposable#Dispose">
            <summary>Release Resources</summary>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine`1.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:FileHelpers.FileHelperAsyncEngine`1.LastRecord">
            <summary>Contains the last Record read by the <see cref="M:FileHelpers.FileHelperAsyncEngine`1.ReadNext"/> method.</summary><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="T:FileHelpers.FileHelperAsyncEngine">
            <summary>
			<para><b>One of the main classes of the library.</b></para>
			<para>This engine is responsable to Read/Write the records <b>One by One</b> from/to files or streams.</para>
		</summary><remarks>
		 <para>You can set the <see cref="P:FileHelpers.ErrorManager.ErrorMode"/> of this class when found an error, and can retrive them with the <see cref="P:FileHelpers.ErrorManager.Errors"/> property.</para>
		 <para>See in the <a href="class_diagram.html">Class Diagram</a> and in the <a href="quick_start.html">Quick Start Guide</a> for more Info.</para>
		 <para>Or you can browse the <a href="examples.html">Examples Seccion</a> for more code.</para>
		</remarks><seealso href="quick_start.html">Quick Start Guide</seealso><seealso href="class_diagram.html">Class Diagram</seealso><seealso href="examples.html">Examples of Use</seealso><seealso href="attributes.html">Attributes List</seealso>
            <example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

	
	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.#ctor(System.Type)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.#ctor(System.Type,System.Text.Encoding)">
            <summary>
			 Initializes a new instance of the FileHelperEngine class with the specified type of records.
		</summary><param name="recordType">The record mapping class.</param>
            <param name="encoding">The encoding used by the Engine.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginReadStream(System.IO.TextReader)">
            <summary>
		Open a specified stream and seek to the first record.
		</summary><remarks>
		<para>This method only seek to the first record.</para>
		<para>To read record by record use <b><see cref="M:FileHelpers.FileHelperAsyncEngine.ReadNext"/></b> method.</para>
		<para>When you stop to read the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine.Close"/></b> method.</para>
		</remarks><param name="reader">The TextReader of the stream.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginReadFile(System.String)">
            <summary>
		Open a specified file and seek to the first record.
		</summary><remarks>
		<para>This method only open the file.</para>
		<para>To read record by record use <b><see cref="M:FileHelpers.FileHelperAsyncEngine.ReadNext"/></b> method.</para>
		<para>When you stop to read the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be read.</param><returns>True if the file is succefully opened. False otherway.</returns><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginReadString(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="FileHelperAsyncEngine.docs.xml" path="doc/BeginReadString/*"/>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.ReadNext">
            <summary>
		Reads the next record of a file opened with the <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		<para>This method not only returns the current record, also moves to the next.</para>
		<para>If the end of file is reached this method return <b>null</b>.</para>
  	    </remarks><returns>The current record of the opened file.</returns><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.ReadNexts(System.Int32)">
            <summary>
		Reads the specified number of records from a file or stream opened with the <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		If there are less records in the source, read to the end.
  	    </remarks><param name="numberOfRecords">The number of records to read. If there are less records in the source, read to the end.</param><returns>The nexts records of the opened file or stream.</returns>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.Flush">
            <summary>
            Save all the buffered data for write to the disk. 
            Useful to long opened async engines that wants to save pending values or for engines used for logging.
            </summary>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.Close">
            <summary>
			Close all opened stream readers and writters (if any).
		</summary><remarks>
		<para>This method must be called when you finish to process a file to dispose the opened streams.</para>
  	    </remarks><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginWriteStream(System.IO.TextWriter)">
            <summary>
		  Set the stream to be used in the <see cref="M:FileHelpers.FileHelperAsyncEngine.WriteNext(System.Object)"/> operation.
		</summary><remarks>
		<para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine.Close"/></b> method.</para>
		</remarks><param name="writer">To stream to writes to.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginWriteFile(System.String)">
            <summary>
		Open a file to write it. If exist the engine override it
		</summary><remarks>
		<para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be opened to write.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.BeginAppendToFile(System.String)">
            <summary>
		Open a file to Append to the end.
		</summary><remarks>
		<para>This method open and seek ends the file.</para>
		<para>When you finish to append to the file you must call <b><see cref="M:FileHelpers.FileHelperAsyncEngine.Close"/></b> method.</para>
		</remarks><param name="fileName">The file path to be opened to write at the end.</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.WriteNext(System.Object)">
            <summary>
		Write the next record to a file or stream opened with <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginAppendToFile(System.String)"/> method.
		</summary><param name="record">The record to write.</param><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginWriteFile("source.txt");
	    
	    record.Field1 = "Primer Registro";
	    record.Field2 = 1;
	    engine.WriteNext(record);
	    
	    record.Field1 = "Segundo Registro";
	    record.Field2 = 2;
	    engine.WriteNext(record);

	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.WriteNexts(System.Collections.IEnumerable)">
            <summary>
		Write the nexts records to a file or stream opened with <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.FileHelperAsyncEngine.BeginAppendToFile(System.String)"/> method.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.System#Collections#IEnumerable#GetEnumerator">
            <summary>Allows to loop record by record in the engine</summary>
            <returns>The enumerator</returns>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.System#IDisposable#Dispose">
            <summary>Release Resources</summary>
        </member>
        <member name="M:FileHelpers.FileHelperAsyncEngine.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="P:FileHelpers.FileHelperAsyncEngine.LastRecord">
            <summary>Contains the last Record read by the <see cref="M:FileHelpers.FileHelperAsyncEngine.ReadNext"/> method.</summary><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="T:FileHelpers.DataLink.GenericDatabaseStorage`1">
            <summary>This is a base class that implements the storage for <b>any</b> DB with ADO.NET support.</summary>
            <typeparam name="ConnectionClass">The ADO.NET connection class</typeparam>
        </member>
        <member name="T:FileHelpers.DataLink.DatabaseStorage">
            <summary>This class implements the <see cref="T:FileHelpers.DataLink.DataStorage"/> and is the base class for Data Base storages.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.#ctor(System.Type)">
            <summary>Default constructor.</summary>
            <param name="recordType">The Record Type.</param>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.FillRecord(System.Object[])">
            <summary>This method recives the fields values as an array and must return a record object.</summary>
            <param name="fieldValues">The record fields values.</param>
            <returns>The record object.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.GetSelectSql">
            <summary>Must return the Select Sql used to Fetch the records to Extract.</summary>
            <returns>The SQL statement.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.GetInsertSql(System.Object)">
            <summary>Must return a SQL string with the insert statement for the records.</summary>
            <param name="record">The record to insert.</param>
            <returns>The Sql string to used to insert the record.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.CreateConnection">
            <summary>Must create an abstract connection object.</summary>
            <returns>An Abstract Connection Object.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.ExtractRecords">
            <summary>Must Return the records from the DataSource (DB, Excel, etc)</summary>
            <returns>The extracted records.</returns>
        </member>
        <member name="M:FileHelpers.DataLink.DatabaseStorage.InsertRecords(System.Object[])">
            <summary>Must Insert the records in a DataSource (DB, Excel, etc)</summary>
            <param name="records">The records to insert.</param>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.SelectSql">
            <summary>Indicates the Sql statment used to get the records.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.ExecuteInBatch">
            <summary>Indicates if the underlaying Conexion allow more than one instruction per execute.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.InsertSqlCallback">
            <summary>Delegate used to get the SQL for the insert or update statement.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.FillRecordCallback">
            <summary>Delegate used to fill the values of a new record from the db.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.ExecuteInBatchSize">
            <summary>Indicates the max number of instruction of each execution. High numbers help reduce the round trips to the db and so help tp improve performance.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.TransactionMode">
            <summary>
            Define the Transaction Level used when inserting records.
            </summary>
        </member>
        <member name="P:FileHelpers.DataLink.DatabaseStorage.ConnectionString">
            <summary>
            The connection string used for this storage.
            </summary>
        </member>
        <member name="M:FileHelpers.DataLink.GenericDatabaseStorage`1.#ctor(System.Type,System.String)">
            <summary>Creates an object that implements the storage for <b>any</b> DB with ADO.NET support.</summary>        
            <param name="recordType">The record type to use.</param>
            <param name="connectionString">The connection string to </param>
        </member>
        <member name="P:FileHelpers.DataLink.GenericDatabaseStorage`1.ExecuteInBatch">
            <summary></summary>
        </member>
        <member name="T:FileHelpers.IgnoreCommentedLinesAttribute">
            <summary>Indicates that the engine must ignore commented lines while reading.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.IgnoreCommentedLinesAttribute.#ctor(System.String)">
            <summary>Indicates that the engine must ignore commented lines while reading. (The Comment Marker can appear in any place with spaces or tabs at his left)</summary>
            <param name="commentMarker">The comment marker used to ignore the lines</param>
        </member>
        <member name="M:FileHelpers.IgnoreCommentedLinesAttribute.#ctor(System.String,System.Boolean)">
            <summary>Indicates that the engine must ignore commented lines while reading.</summary>
            <param name="commentMarker">The comment marker used to ignore the lines</param>
            <param name="anyPlace">Indicates if the comment can have spaces or tabs at left (true by default)</param>
        </member>
        <member name="T:FileHelpers.FieldOptionalAttribute">
            <summary>Indicates that the target field is included only under some circunstances.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldOptionalAttribute.#ctor">
            <summary>Indicates that the target field is included only under some circunstances.</summary>
        </member>
        <member name="T:FileHelpers.ProgressEventArgs">
            <summary>Class used to notify the current progress position and other context info.</summary>
        </member>
        <member name="P:FileHelpers.ProgressEventArgs.ProgressCurrent">
            <summary>The current progress position. Check also the ProgressMode property.</summary>
        </member>
        <member name="P:FileHelpers.ProgressEventArgs.ProgressTotal">
            <summary>The total when the progress finish. (<b>-1 means undefined</b>)</summary>
        </member>
        <member name="P:FileHelpers.ProgressEventArgs.ProgressMode">
            <summary>The ProgressMode used.</summary>
        </member>
        <member name="T:FileHelpers.ProgressChangeHandler">
            <summary>Delegate used to notify progress to the user.</summary>
            <param name="e">The Event args with information about the progress.</param>
        </member>
        <member name="T:FileHelpers.WriteRecordEventArgs`1">
            <summary>Base class of <see cref="T:FileHelpers.BeforeWriteRecordEventArgs`1"/> and <see cref="T:FileHelpers.AfterWriteRecordEventArgs`1"/></summary>
        </member>
        <member name="P:FileHelpers.WriteRecordEventArgs`1.Record">
            <summary>The current record.</summary>
        </member>
        <member name="P:FileHelpers.WriteRecordEventArgs`1.LineNumber">
            <summary>The current line number.</summary>
        </member>
        <member name="T:FileHelpers.BeforeWriteRecordEventArgs">
            <summary>Arguments for the <see cref="T:FileHelpers.BeforeWriteRecordHandler"/></summary>
        </member>
        <member name="T:FileHelpers.BeforeWriteRecordEventArgs`1">
            <summary>Arguments for the <see cref="T:FileHelpers.BeforeWriteRecordHandler"/></summary>
        </member>
        <member name="P:FileHelpers.BeforeWriteRecordEventArgs`1.SkipThisRecord">
            <summary>Set this property as true if you want to bypass the current record.</summary>
        </member>
        <member name="T:FileHelpers.AfterWriteRecordEventArgs">
            <summary>Arguments for the <see cref="T:FileHelpers.AfterWriteRecordHandler"/></summary>
        </member>
        <member name="T:FileHelpers.AfterWriteRecordEventArgs`1">
            <summary>Arguments for the <see cref="T:FileHelpers.AfterWriteRecordHandler"/></summary>
        </member>
        <member name="P:FileHelpers.AfterWriteRecordEventArgs`1.RecordLine">
            <summary>The line to be written to the file. WARNING: you can change this and the engines will write it to the file.</summary>
        </member>
        <member name="T:FileHelpers.RecordCondition">
            <summary>The condition used to include or exclude each record.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.None">
            <summary>No Condition, Include it always.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.IncludeIfContains">
            <summary>Include the record if it contains the selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.IncludeIfBegins">
            <summary>Include the record if it begins with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.IncludeIfEnds">
            <summary>Include the record if it ends with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.IncludeIfEnclosed">
            <summary>Include the record if it begins and ends with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.IncludeIfMatchRegex">
            <summary>Include the record if it matchs the regular expression passed as selector.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.ExcludeIfContains">
            <summary>Exclude the record if it contains the selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.ExcludeIfBegins">
            <summary>Exclude the record if it begins with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.ExcludeIfEnds">
            <summary>Exclude the record if it ends with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.ExcludeIfEnclosed">
            <summary>Exclude the record if it begins and ends with selector string.</summary>
        </member>
        <member name="F:FileHelpers.RecordCondition.ExcludeIfMatchRegex">
            <summary>Exclude the record if it matchs the regular expression passed as selector.</summary>
        </member>
        <member name="T:FileHelpers.RecordTypeSelector">
            <summary>
            Delegate thats determines the Type of the current record (Master, Detail, Skip)
            </summary>
            <param name="recordString">The string of the current record.</param>
            <param name="engine">The engine that calls the selector.</param>
            <returns>the action used for the current record (Master, Detail, Skip)</returns>
        </member>
        <member name="T:FileHelpers.MultiRecordEngine">
            <summary><para>This engine allows you to parse and write files that contain
            records of different types and that are in a linear relationship</para>
            <para>(for Master-Detail check the <see cref="T:FileHelpers.MasterDetail.MasterDetailEngine"/>)</para>
            </summary>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="class_diagram.html">Class Diagram</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
            <seealso href="example_datalink.html">Example of the DataLink</seealso>
            <seealso href="attributes.html">Attributes List</seealso>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.#ctor(System.Type[])">
            <summary>Create a new instance of the MultiRecordEngine</summary>
            <param name="recordTypes">The Types of the records that this engine can handle.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.#ctor(FileHelpers.RecordTypeSelector,System.Type[])">
            <summary>Create a new instance of the MultiRecordEngine</summary>
            <param name="recordTypes">The Types of the records that this engine can handle.</param>
            <param name="recordSelector">Used only in read operations. The selector indicates to the engine what Type to use in each read line.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.ReadFile(System.String)">
            <summary>
            Read a File and returns the records.
            </summary>
            <param name="fileName">The file with the records.</param>
            <returns>The read records of the differents types all mixed.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.ReadStream(System.IO.TextReader)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));

		SampleType[] records;	
		
		records = (SampleType[]) engine.ReadFile("source.txt");
		
		// Now "records" array contains all the records in the
		// sourcefile and can be acceded like this:
		
		int sum = records[0].Field2 + records[1].Field2;
	}

</textarea>
		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.ReadString(System.String)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteFile(System.String,System.Collections.IEnumerable)">
            <summary>
		Write an array of records to the specified file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteFile(System.String,System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write the specified number of records from the array to a file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteStream(System.IO.TextWriter,System.Collections.IEnumerable)">
            <summary>
            Write the records to a file
            </summary>
            <param name="writer"></param>
            <param name="records"></param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteStream(System.IO.TextWriter,System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write the specified number of records in the array to the Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void WriteExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.WriteFile("destination.txt", records);
		
		// Now the file contains the created record in this format:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteString(System.Collections.IEnumerable)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteString(System.Collections.IEnumerable,System.Int32)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>The resulting string after write the records.</returns><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.AppendToFile(System.String,System.Object)">
            <summary>
		Append a record to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="record">The record to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.AppendToFile(System.String,System.Collections.IEnumerable)">
            <summary>
		Append an array of records to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
			This example show the basic use of the library with minimun code:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void AppendExample()
	{
		FileHelperEngine engine = new FileHelperEngine(typeof(SampleType));
		
		SampleType[] records = new SampleType[1];

		records[0] = new SampleType();

		records[0].Field1 = "Hello World";
		records[0].Field2 = 12;

		engine.AppendToFile("destination.txt", records);
		
		// Now the file contains have one more record at the end:
		// 
		// Hello World,12
		
	}

</textarea>
		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="records">The records to write (Can be an array, ArrayList, etc)</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginReadStream(System.IO.TextReader)">
            <summary>
            Method used to use this engine in Async mode. Work together with <see cref="M:FileHelpers.MultiRecordEngine.ReadNext"/>. (Remember to call Close after read the data)
            </summary>
            <param name="reader">The source Reader.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginReadFile(System.String)">
            <summary>
            Method used to use this engine in Async mode. Work together with <see cref="M:FileHelpers.MultiRecordEngine.ReadNext"/>. (Remember to call Close after read the data)
            </summary>
            <param name="fileName">The source file.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginReadString(System.String)">
            <summary>
            Method used to use this engine in Async mode. Work together with <see cref="M:FileHelpers.MultiRecordEngine.ReadNext"/>. (Remember to call Close after read the data)
            </summary>
            <param name="sourceData">The source String</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.Flush">
            <summary>
            Save all the buffered data for write to the disk. 
            Useful to long opened async engines that wants to save pending values or for engines used for logging.
            </summary>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.Close">
            <summary>
            Close the underlining Readers and Writers. (if any)
            </summary>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.ReadNext">
            <summary>
		Reads the next record of a file opened with the <see cref="M:FileHelpers.MultiRecordEngine.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.MultiRecordEngine.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		<para>This method not only returns the current record, also moves to the next.</para>
		<para>If the end of file is reached this method return <b>null</b>.</para>
  	    </remarks><returns>The current record of the opened file.</returns><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.ReadNexts(System.Int32)">
            <summary>
		Reads the specified number of records from a file or stream opened with the <see cref="M:FileHelpers.MultiRecordEngine.BeginReadFile(System.String)"/> or <see cref="M:FileHelpers.MultiRecordEngine.BeginReadStream(System.IO.TextReader)"/> method.
		</summary><remarks>
		If there are less records in the source, read to the end.
  	    </remarks><param name="numberOfRecords">The number of records to read. If there are less records in the source, read to the end.</param><returns>The nexts records of the opened file or stream.</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.System#Collections#IEnumerable#GetEnumerator">
            <summary>Allows to loop record by record in the engine</summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.System#IDisposable#Dispose">
            <summary>
            Release Resources
            </summary>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.Finalize">
            <summary>Destructor</summary>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteNext(System.Object)">
            <summary>Write the next record to a file or stream opened with <see cref="M:FileHelpers.MultiRecordEngine.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.MultiRecordEngine.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.MultiRecordEngine.BeginAppendToFile(System.String)"/> method.</summary>
            <param name="record">The record to write.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.WriteNexts(System.Collections.IEnumerable)">
            <summary>Write the nexts records to a file or stream opened with <see cref="M:FileHelpers.MultiRecordEngine.BeginWriteFile(System.String)"/>, <see cref="M:FileHelpers.MultiRecordEngine.BeginWriteStream(System.IO.TextWriter)"/> or <see cref="M:FileHelpers.MultiRecordEngine.BeginAppendToFile(System.String)"/> method.</summary>
            <param name="records">The records to write (Can be an array, ArrayList, etc)</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginWriteStream(System.IO.TextWriter)">
            <summary>Set the stream to be used in the <see cref="M:FileHelpers.MultiRecordEngine.WriteNext(System.Object)"/> operation.</summary>
            <remarks><para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.MultiRecordEngine.Close"/></b> method.</para></remarks>
            <param name="writer">To stream to writes to.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginWriteFile(System.String)">
            <summary>Open a file for write operations. If exist the engine override it. You can use <see cref="M:FileHelpers.MultiRecordEngine.WriteNext(System.Object)"/> or <see cref="M:FileHelpers.MultiRecordEngine.WriteNexts(System.Collections.IEnumerable)"/> to write records.</summary>
            <remarks><para>When you finish to write to the file you must call <b><see cref="M:FileHelpers.MultiRecordEngine.Close"/></b> method.</para></remarks>
            <param name="fileName">The file path to be opened for write.</param>
        </member>
        <member name="M:FileHelpers.MultiRecordEngine.BeginAppendToFile(System.String)">
            <summary>Open a file to be appended at the end.</summary>
            <remarks><para>This method open and seek to the end the file.</para>
            <para>When you finish to append to the file you must call <b><see cref="M:FileHelpers.MultiRecordEngine.Close"/></b> method.</para></remarks>
            <param name="fileName">The file path to be opened to write at the end.</param>
        </member>
        <member name="P:FileHelpers.MultiRecordEngine.RecordSelector">
            <summary>
            The Selector used by the engine in Read operations to determine the Type to use.
            </summary>
        </member>
        <member name="E:FileHelpers.MultiRecordEngine.BeforeReadRecord">
            <summary>Called in read operations just before the record string is translated to a record.</summary>
        </member>
        <member name="E:FileHelpers.MultiRecordEngine.AfterReadRecord">
            <summary>Called in read operations just after the record was created from a record string.</summary>
        </member>
        <member name="E:FileHelpers.MultiRecordEngine.BeforeWriteRecord">
            <summary>Called in write operations just before the record is converted to a string to write it.</summary>
        </member>
        <member name="E:FileHelpers.MultiRecordEngine.AfterWriteRecord">
            <summary>Called in write operations just after the record was converted to a string.</summary>
        </member>
        <member name="P:FileHelpers.MultiRecordEngine.LastRecord">
            <summary>Contains the last Record read by the <see cref="M:FileHelpers.MultiRecordEngine.ReadNext"/> method.</summary><example>
			This example show the basic use of the async methods in the FileHelperAsymcEngine:
<code>
<textarea name="code" class="c#">

	using FileHelpers;
	
	// First declare the record class
		
	[Delimitedrecord("|")]
	public class SampleType
	{
		public string Field1;
		public int    Field2;
	}


	public void ReadExample()
	{
		SampleType record;	

		FileHelperAsyncEngine engine = new FileHelperAsyncEngine(typeof(SampleType));

	    engine.BeginReadFile("source.txt");
	    
	    while( engine.ReadNext() != null )
	    {
	       record = (SampleType) engine.LastRecord;
	       
	       // put your code here !!!!
	       Console.WriteLine("Data " + record.Field1 + " , " + record.Field2.ToString());
	    
	    }
	    
	    engine.Close();
	}

</textarea>
		</code>
		</example>
        </member>
        <member name="T:FileHelpers.FixedFileEngine">
            <summary>
            Is a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            fixed length records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with little different options.
            </remarks>
        </member>
        <member name="M:FileHelpers.FixedFileEngine.#ctor(System.Type)">
            <summary>
            Creates a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            fixed length records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with little different options.
            </remarks>
            <param name="recordType">The record mapping class.</param>
        </member>
        <member name="P:FileHelpers.FixedFileEngine.Options">
            <summary>Allow changes some fixed length options and others common settings.</summary>
        </member>
        <member name="T:FileHelpers.FixedFileEngine`1">
            <summary>
            Is a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            fixed length records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with little different options.
            </remarks>
        </member>
        <member name="M:FileHelpers.FixedFileEngine`1.#ctor">
            <summary>
            Creates a version of the <see cref="T:FileHelpers.FileHelperEngine"/> exclusive for 
            fixed length records that allow you to change the delimiter an other options at runtime
            </summary>
            <remarks>
            Useful when you need to export or import the same info with little different options.
            </remarks>
        </member>
        <member name="P:FileHelpers.FixedFileEngine`1.Options">
            <summary>Allow changes some fixed length options and others common settings.</summary>
        </member>
        <member name="T:FileHelpers.IgnoreLastAttribute">
            <summary>Indicates the number of lines to be discarded at the end.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.IgnoreLastAttribute.#ctor">
            <summary>Indicates that the last line must be discarded.</summary>
        </member>
        <member name="M:FileHelpers.IgnoreLastAttribute.#ctor(System.Int32)">
            <summary>Indicates the number of last lines to be ignored at the end.</summary>
            <param name="numberOfLines">The number of lines to be discarded at end.</param>
        </member>
        <member name="T:FileHelpers.FieldQuotedAttribute">
            <summary>Indicates that the field must be read and written like a Quoted String. (by default "")</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor">
            <summary>Indicates that the field must be read and written like a Quoted String with double quotes.</summary>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(System.Char)">
            <summary>Indicates that the field must be read and written like a Quoted String with the specified char.</summary>
            <param name="quoteChar">The char used to quote the string.</param>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(FileHelpers.QuoteMode)">
            <summary>Indicates that the field must be read and written like a "Quoted String"  (that can be optional depending of the mode).</summary>
            <param name="mode">Indicates if the handling of optionals in the quoted field.</param>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(FileHelpers.QuoteMode,FileHelpers.MultilineMode)">
            <summary>Indicates that the field must be read and written like a Quoted String (that can be optional).</summary>
            <param name="mode">Indicates if the handling of optionals in the quoted field.</param>
            <param name="multiline">Indicates if the field can span multiple lines.</param>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(System.Char,FileHelpers.QuoteMode)">
            <summary>Indicates that the field must be read and written like a Quoted String (that can be optional).</summary>
            <param name="quoteChar">The char used to quote the string.</param>
            <param name="mode">Indicates if the handling of optionals in the quoted field.</param>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(System.Char,FileHelpers.QuoteMode,FileHelpers.MultilineMode)">
            <summary>Indicates that the field must be read and written like a Quoted String (that can be optional).</summary>
            <param name="quoteChar">The char used to quote the string.</param>
            <param name="mode">Indicates if the handling of optionals in the quoted field.</param>
            <param name="multiline">Indicates if the field can span multiple lines.</param>
        </member>
        <member name="M:FileHelpers.FieldQuotedAttribute.#ctor(FileHelpers.MultilineMode)">
            <summary>Indicates that the field must be read and written like a Quoted String with double quotes.</summary>
            <param name="multiline">Indicates if the field can span multiple lines.</param>
        </member>
        <member name="T:FileHelpers.FieldAlignAttribute">
            <summary>Indicates the <see cref="T:FileHelpers.AlignMode"/> used for <b>write</b> operations.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldAlignAttribute.#ctor(FileHelpers.AlignMode)">
            <summary>Uses the ' ' char to align.</summary>
            <param name="align">The position of the alignment.</param>
        </member>
        <member name="M:FileHelpers.FieldAlignAttribute.#ctor(FileHelpers.AlignMode,System.Char)">
            <summary>You can indicate the align char.</summary>
            <param name="align">The position of the alignment.</param>
            <param name="alignChar">The character used to align.</param>
        </member>
        <member name="F:FileHelpers.FieldAlignAttribute.Align">
            <summary>The position of the alignment.</summary>
        </member>
        <member name="F:FileHelpers.FieldAlignAttribute.AlignChar">
            <summary>The character used to align.</summary>
        </member>
        <member name="T:FileHelpers.CommonEngine">
            <summary>This class only have <b>static methods</b> to work with files and strings (the most common of them)</summary>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFile(System.Type,System.String)">
            <summary>
            Used to read a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFile(System.Type,System.String,System.Int32)">
            <summary>
            Used to read a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFileAsDT(System.Type,System.String)">
            <summary>
            Used to read a file as a DataTable without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <returns>The datatable representing all the read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFileAsDT(System.Type,System.String,System.Int32)">
            <summary>
            Used to read a file as a DataTable without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The datatable representing all the read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFile``1(System.String)">
            <summary>
            Used to read a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadFile``1(System.String,System.Int32)">
            <summary>
            Used to read a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadString(System.Type,System.String)">
            <summary>
            Used to read a string without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="input">The input string.</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadString(System.Type,System.String,System.Int32)">
            <summary>
            Used to read a string without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="input">The input string.</param>
            <param name="maxRecords">The max number of records to read. Int32.MaxValue or -1 to read all records.</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadString``1(System.String)">
            <summary>
            Used to read a string without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="input">The input string.</param>
            <returns>The read records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.WriteFile(System.Type,System.String,System.Collections.IEnumerable)">
            <summary>
            Used to write a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="fileName">The file name</param>
            <param name="records">The records to write (Can be an array, ArrayList, etc)</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.WriteFile``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Used to write a file without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="fileName">The file name</param>
            <param name="records">The records to write (Can be an array, List&lt;T&gt;, etc)</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.WriteString(System.Type,System.Collections.IEnumerable)">
            <summary>
            Used to write a string without instanciate the engine.<br />
            <b>This is feature limited method try to use the non static methods.</b>
            </summary>
            <param name="recordClass">The record class.</param>
            <param name="records">The records to write (Can be an array, ArrayList, etc)</param>
            <returns>The string with the writen records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.TransformFileAsync(System.String,System.Type,System.String,System.Type)">
            <summary><b>Faster way</b> to Transform the records of type sourceType in the sourceFile in records of type destType and write them to the destFile.</summary>
            <param name="sourceType">The Type of the records in the source File.</param>
            <param name="destType">The Type of the records in the dest File.</param>
            <param name="sourceFile">The file with records to be transformed</param>
            <param name="destFile">The destination file with the transformed records</param>
            <returns>The number of transformed records</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.TransformFile(System.String,System.Type,System.String,System.Type)">
            <summary>Transform the records of type sourceType in the sourceFile in records of type destType and write them to the destFile. (but returns the transformed records) WARNING: this is a slower method that the TransformFileAssync.</summary>
            <param name="sourceType">The Type of the records in the source File.</param>
            <param name="destType">The Type of the records in the dest File.</param>
            <param name="sourceFile">The file with records to be transformed</param>
            <param name="destFile">The destination file with the transformed records</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.ReadSortedFile(System.Type,System.String)">
            <summary>
            Read the contents of a file and sort the records.
            </summary>
            <param name="recordClass">Record Class (remember that need to implement the IComparer interface, or you can use SortFileByfield)</param>
            <param name="fileName">The file to read.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.SortFile(System.Type,System.String,System.String)">
            <summary>
            Sort the contents of the source file and write them to the destination file. 
            </summary>
            <param name="recordClass">Record Class (remember that need to implement the IComparable interface or use the SortFileByfield instead)</param>
            <param name="sourceFile">The source file.</param>
            <param name="sortedFile">The destination File.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.SortFileByField(System.Type,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Sort the content of a File using the field name provided
            </summary>
            <param name="recordClass">The class for each record of the file.</param>
            <param name="fieldName">The name of the field used to sort the file.</param>
            <param name="asc">The sort direction.</param>
            <param name="sourceFile">The source file.</param>
            <param name="sortedFile">The destination File.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.SortRecordsByField(System.Object[],System.String)">
            <summary>
            Sort the Record Array based in the field name provided. (for advanced sorting use SortRecords)
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="records">The records Array.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.SortRecordsByField(System.Object[],System.String,System.Boolean)">
            <summary>
            Sort the Record Array based in the field name provided. (for advanced sorting use SortRecords)
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="records">The records Array.</param>
            <param name="ascending">The direction of the sort. True means Ascending.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.SortRecords(System.Object[])">
            <summary>
            Sort the Record Array. The records must be of a Type that implements the IComparable interface.
            </summary>
            <param name="records">The records Array.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.RecordsToDataTable(System.Collections.ICollection)">
            <summary>Converts any collection of records to a DataTebla using reflection. WARNING: this methods returns null if the number of records is 0, pass the Type of the records to get an empty DataTable.</summary>
            <param name="records">The records to be converted to a DataTable</param>
            <returns>The datatable containing the records as DataRows</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.RecordsToDataTable(System.Collections.ICollection,System.Int32)">
            <summary>Converts any collection of records to a DataTebla using reflection. WARNING: this methods returns null if the number of records is 0, pass the Type of the records to get an empty DataTable.</summary>
            <param name="records">The records to be converted to a DataTable</param>
            <param name="maxRecords">The max number of records to add to the datatable. -1 for all.</param>
            <returns>The datatable containing the records as DataRows</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.RecordsToDataTable(System.Collections.ICollection,System.Type)">
            <summary>Converts any collection of records to a DataTebla using reflection. If the number of records is 0 this methods returns an empty DataTable with the columns based on the fields of the Type.</summary>
            <param name="records">The records to be converted to a DataTable</param>
            <returns>The datatable containing the records as DataRows</returns>
            <param name="recordType">The type of the inner records.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.RecordsToDataTable(System.Collections.ICollection,System.Type,System.Int32)">
            <summary>Converts any collection of records to a DataTebla using reflection. If the number of records is 0 this methods returns an empty DataTable with the columns based on the fields of the Type.</summary>
            <param name="records">The records to be converted to a DataTable</param>
            <returns>The datatable containing the records as DataRows</returns>
            <param name="maxRecords">The max number of records to add to the datatable. -1 for all.</param>
            <param name="recordType">The type of the inner records.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.MergeFiles(System.Type,System.String,System.String,System.String)">
            <summary>
            Reads the file1 and file2 using the recordType and write it to destinationFile
            </summary>
        </member>
        <member name="M:FileHelpers.CommonEngine.MergeAndSortFile(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Merge the contents of 2 files and write them sorted to a destination file.
            </summary>
            <param name="recordType">The record Type.</param>
            <param name="file1">File with contents to be merged.</param>
            <param name="file2">File with contents to be merged.</param>
            <param name="field">The name of the field used to sort the records.</param>
            <param name="destFile">The destination file.</param>
            <returns>The merged and sorted records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.MergeAndSortFile(System.Type,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Merge the contents of 2 files and write them sorted to a destination file.
            </summary>
            <param name="recordType">The record Type.</param>
            <param name="file1">File with contents to be merged.</param>
            <param name="file2">File with contents to be merged.</param>
            <param name="field">The name of the field used to sort the records.</param>
            <param name="ascending">Indicate the order of sort.</param>
            <param name="destFile">The destination file.</param>
            <returns>The merged and sorted records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.MergeAndSortFile(System.Type,System.String,System.String,System.String)">
            <summary>
            Merge the contents of 2 files and write them sorted to a destination file.
            </summary>
            <param name="recordType">The record Type.</param>
            <param name="file1">File with contents to be merged.</param>
            <param name="file2">File with contents to be merged.</param>
            <param name="destFile">The destination file.</param>
            <returns>The merged and sorted records.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.DataTableToCsv(System.Data.DataTable,System.String)">
            <summary>Simply dumps the DataTable contents to a delimited file using a ',' as delimiter.</summary>
            <param name="dt">The source Data Table</param>
            <param name="filename">The destination file.</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.DataTableToCsv(System.Data.DataTable,System.String,System.Char)">
            <summary>Simply dumps the DataTable contents to a delimited file. Only allows to set the delimiter.</summary>
            <param name="dt">The source Data Table</param>
            <param name="filename">The destination file.</param>
            <param name="delimiter">The delimiter used to write the file</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.DataTableToCsv(System.Data.DataTable,System.String,FileHelpers.CsvOptions)">
            <summary>Simply dumps the DataTable contents to a delimited file. Only allows to set the delimiter.</summary>
            <param name="dt">The source Data Table</param>
            <param name="filename">The destination file.</param>
            <param name="options">The options used to write the file</param>
        </member>
        <member name="M:FileHelpers.CommonEngine.CsvToDataTable(System.String,System.Char)">
            <summary>Reads a Csv File and return their contents as DataTable (The file must have the field names in the first row)</summary>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.CsvToDataTable(System.String,System.String,System.Char)">
            <summary>Reads a Csv File and return their contents as DataTable (The file must have the field names in the first row)</summary>
            <param name="classname">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.CsvToDataTable(System.String,System.String,System.Char,System.Boolean)">
            <summary>Reads a Csv File and return their contents as DataTable</summary>
            <param name="classname">The name of the record class</param>
            <param name="delimiter">The delimiter for each field</param>
            <param name="filename">The file to read.</param>
            <param name="hasHeader">Indicates if the file contains a header with the field names.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.CsvToDataTable(System.String,FileHelpers.CsvOptions)">
            <summary>Reads a Csv File and return their contents as DataTable</summary>
            <param name="filename">The file to read.</param>
            <param name="options">The options used to create the record mapping class.</param>
            <returns>The contents of the file as a DataTable</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.RemoveDuplicateRecords(FileHelpers.IComparableRecord[])">
            <summary>
            This method allow to remove the duplicated records from an array.
            </summary>
            <param name="arr">The array with the records to be checked.</param>
            <returns>An array with the result of remove the duplicate records from the source array.</returns>
        </member>
        <member name="M:FileHelpers.CommonEngine.RawReadFirstLines(System.String,System.Int32)">
            <summary>
            Shortcut method to read the first n lines of a text file.
            </summary>
            <param name="file">The file name</param>
            <param name="lines">The number of lines to read.</param>
            <returns>The first n lines of the file.</returns>
        </member>
        <member name="T:FileHelpers.DataLink.InsertSqlHandler">
            <summary>Delegate used by the <see cref="T:FileHelpers.DataLink.DatabaseStorage"/> to get the SQL for the insert or update statement.</summary>
            <param name="record">The record to insert</param>
            <return>The Sql string to insert the record.</return>
        </member>
        <member name="T:FileHelpers.DataLink.FillRecordHandler">
            <summary>Delegate used by the <see cref="T:FileHelpers.DataLink.DatabaseStorage"/> to fill the values of a new record from the db (you only need to assing hte values.</summary>
            <param name="record">The record to fill.</param>
            <param name="fieldValues">The values read from the database, you need to use these to fill the record.</param>
        </member>
        <member name="T:FileHelpers.FileTransformEngine">
            <summary>
            This class allow you to convert the records of a file to a different record format.
            </summary>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="class_diagram.html">Class Diagram</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
            <seealso href="example_datalink.html">Example of the DataLink</seealso>
            <seealso href="attributes.html">Attributes List</seealso>
        </member>
        <member name="M:FileHelpers.FileTransformEngine.#ctor(System.Type,System.Type)">
            <summary>Create a new instance of the class.</summary>
            <param name="sourceType">The source record Type.</param>
            <param name="destType">The destination record Type.</param>
        </member>
        <member name="M:FileHelpers.FileTransformEngine.TransformFile(System.String,System.String)">
            <summary>Transform the contents of the sourceFile and write them to the destFile.(use only if you need the array of the transformed records, TransformFileAsync is faster)</summary>
            <param name="sourceFile">The source file.</param>
            <param name="destFile">The destination file.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine.TransformFileAsync(System.String,System.String)">
            <summary>Transform the contents of the sourceFile and write them to the destFile. (faster and use less memory, best choice for big files)</summary>
            <param name="sourceFile">The source file.</param>
            <param name="destFile">The destination file.</param>
            <returns>The number of transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine.TransformRecords(System.Object[])">
            <summary>Transform an array of records from the source type to the destination type</summary>
            <param name="sourceRecords">An array of the source records.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="M:FileHelpers.FileTransformEngine.ReadAndTransformRecords(System.String)">
            <summary>Transform a file that contains source records to an array of the destination type</summary>
            <param name="sourceFile">A file containing the source records.</param>
            <returns>The transformed records.</returns>
        </member>
        <member name="P:FileHelpers.FileTransformEngine.SourceType">
            <summary>The source record Type.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine.DestinationType">
            <summary>The destination record Type.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine.SourceEncoding">
            <summary>The Encoding of the Source File.</summary>
        </member>
        <member name="P:FileHelpers.FileTransformEngine.DestinationEncoding">
            <summary>The Encoding of the Destination File.</summary>
        </member>
        <member name="T:FileHelpers.FileDiffEngine`1">
            <summary>Engine used to create diff files based on the <see cref="T:FileHelpers.IComparableRecord"/> interface.</summary>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.#ctor">
            <summary>
            Creates a new <see cref="T:FileHelpers.FileDiffEngine"/>
            </summary>
            <param name="recordType">The record type class that implements the <see cref="T:FileHelpers.IComparableRecord"/> interface.</param>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.OnlyNewRecords(System.String,System.String)">
            <summary>Returns the records in newFile that not are in the sourceFile</summary>
            <param name="sourceFile">The file with the old records.</param>
            <param name="newFile">The file with the new records.</param>
            <returns>The records in newFile that not are in the sourceFile</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.OnlyMissingRecords(System.String,System.String)">
            <summary>Returns the records in newFile that not are in the sourceFile</summary>
            <param name="sourceFile">The file with the old records.</param>
            <param name="newFile">The file with the new records.</param>
            <returns>The records in newFile that not are in the sourceFile</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.OnlyDuplicatedRecords(System.String,System.String)">
            <summary>
            Returns the duplicated records in both files.
            </summary>
            <param name="file1">A file with record.</param>
            <param name="file2">A file with record.</param>
            <returns>The records that appear in both files.</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.OnlyNoDuplicatedRecords(System.String,System.String)">
            <summary>
            Returns the NON duplicated records in both files.
            </summary>
            <param name="file1">A file with record.</param>
            <param name="file2">A file with record.</param>
            <returns>The records that NOT appear in both files.</returns>
        </member>
        <member name="M:FileHelpers.FileDiffEngine`1.WriteNewRecords(System.String,System.String,System.String)">
            <summary>Read the source file, the new file, get the new records and write them to a destination file.</summary>
            <param name="sourceFile">The file with the source records.</param>
            <param name="newFile">The file with the new records.</param>
            <param name="destFile">The destination file.</param>
            <returns>The new records on the new file.</returns>
        </member>
        <member name="T:FileHelpers.DataLink.AccessStorage">
            <summary>This is a base class that implements the <see cref="T:FileHelpers.DataLink.DataStorage"/> for Microsoft Access Files.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.AccessStorage.#ctor(System.Type)">
            <summary>Creates a new AccessStorage.</summary>
            <param name="recordType">The Type of the Records</param>
        </member>
        <member name="M:FileHelpers.DataLink.AccessStorage.#ctor(System.Type,System.String)">
            <summary>Creates a new AccessStorage using the indicated file.</summary>
            <param name="recordType">The Type of the Records</param>
            <param name="accessFile">The MS Access file.</param>
        </member>
        <member name="M:FileHelpers.DataLink.AccessStorage.CreateConnection">
            <summary>Must create an abstract connection object.</summary>
            <returns>An Abstract Connection Object.</returns>
        </member>
        <member name="P:FileHelpers.DataLink.AccessStorage.AccessFileName">
            <summary>The file full path of the Microsoft Access File.</summary>
        </member>
        <member name="P:FileHelpers.DataLink.AccessStorage.AccessFilePassword">
            <summary>The password to the access database.</summary>
        </member>
        <member name="T:FileHelpers.MasterDetail.MasterDetails`2">
            <summary>
            <para>This class contains information of a Master record an their Details records.</para>
            <para>This class is used for the Read and Write operations of the <see cref="T:FileHelpers.MasterDetail.MasterDetailEngine"/>.</para>
            </summary>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetails`2.#ctor">
            <summary>Create an empty instance.</summary>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetails`2.#ctor(`0,`1[])">
            <summary>Create a new instance with the specified values.</summary>
            <param name="master">The master record.</param>
            <param name="details">The details record.</param>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails`2.Empty">
            <summary>Returns a canonical empty MasterDetail object.</summary>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails`2.Master">
            <summary>The Master record.</summary>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetails`2.Details">
            <summary>An Array with the Detail records.</summary>
        </member>
        <member name="T:FileHelpers.TransformToRecordAttribute">
            <summary>With this attribute you can mark a method in the RecordClass that is the responsable of convert it to the specified.</summary>
        </member>
        <member name="M:FileHelpers.TransformToRecordAttribute.#ctor(System.Type)">
            <summary>With this attribute you can mark a method in the RecordClass that is the responsable of convert it to the specified.</summary>
            <param name="targetType">The target of the convertion.</param>
        </member>
        <member name="T:FileHelpers.ReadRecordEventArgs">
            <summary>Base class of <see cref="T:FileHelpers.BeforeReadRecordEventArgs"/> and <see cref="T:FileHelpers.AfterReadRecordEventArgs"/></summary>
        </member>
        <member name="P:FileHelpers.ReadRecordEventArgs.LineNumber">
            <summary>The current line number.</summary>
        </member>
        <member name="P:FileHelpers.ReadRecordEventArgs.RecordLine">
            <summary>The just read record line.</summary>
        </member>
        <member name="T:FileHelpers.BeforeReadRecordEventArgs">
            <summary>Arguments for the <see cref="T:FileHelpers.BeforeReadRecordHandler"/></summary>
        </member>
        <member name="T:FileHelpers.BeforeReadRecordEventArgs`1">
            <summary>Arguments for the <see cref="T:FileHelpers.BeforeReadRecordHandler"/></summary>
        </member>
        <member name="P:FileHelpers.BeforeReadRecordEventArgs`1.SkipThisRecord">
            <summary>Set this property to true if you want to bypass the current line.</summary>
        </member>
        <member name="T:FileHelpers.AfterReadRecordEventArgs">
            <summary>Arguments for the <see cref="T:FileHelpers.AfterReadRecordHandler"/></summary>
        </member>
        <member name="T:FileHelpers.AfterReadRecordEventArgs`1">
            <summary>Arguments for the <see cref="T:FileHelpers.AfterReadRecordHandler"/></summary>
        </member>
        <member name="P:FileHelpers.AfterReadRecordEventArgs`1.Record">
            <summary>The current record.</summary>
        </member>
        <member name="P:FileHelpers.AfterReadRecordEventArgs`1.SkipThisRecord">
            <summary>Set this property to true if you want to bypass the current record.</summary>
        </member>
        <member name="T:FileHelpers.AlignMode">
            <summary>Indicates the align of the field when the <see cref="T:FileHelpers.FileHelperEngine"/> <b>writes</b> the record.</summary>
        </member>
        <member name="F:FileHelpers.AlignMode.Left">
            <summary>Aligns the field to the left.</summary>
        </member>
        <member name="F:FileHelpers.AlignMode.Center">
            <summary>Aligns the field to the center.</summary>
        </member>
        <member name="F:FileHelpers.AlignMode.Right">
            <summary>Aligns the field to the right.</summary>
        </member>
        <member name="T:FileHelpers.FieldConverterAttribute">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write operations.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(FileHelpers.ConverterKind)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="converter">The <see cref="T:FileHelpers.ConverterKind"/> used for the transformations.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(FileHelpers.ConverterKind,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="converter">The <see cref="T:FileHelpers.ConverterKind"/> used for the transformations.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(FileHelpers.ConverterKind,System.String,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="converter">The <see cref="T:FileHelpers.ConverterKind"/> used for the transformations.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
            <param name="arg2">The second param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(FileHelpers.ConverterKind,System.String,System.String,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="converter">The <see cref="T:FileHelpers.ConverterKind"/> used for the transformations.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
            <param name="arg2">The second param pased directly to the Converter Constructor.</param>
            <param name="arg3">The third param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(System.Type,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="customConverter">The Type of your custom converter.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="customConverter">The Type of your custom converter.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
            <param name="arg2">The second param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(System.Type,System.String,System.String,System.String)">
            <summary>Indicates the <see cref="T:FileHelpers.ConverterKind"/> used for read/write ops. </summary>
            <param name="customConverter">The Type of your custom converter.</param>
            <param name="arg1">The first param pased directly to the Converter Constructor.</param>
            <param name="arg2">The second param pased directly to the Converter Constructor.</param>
            <param name="arg3">The third param pased directly to the Converter Constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>Indicates a custom <see cref="T:FileHelpers.ConverterBase"/> implementation.</summary>
            <param name="customConverter">The Type of your custom converter.</param>
            <param name="args">A list of params pased directly to your converter constructor.</param>
        </member>
        <member name="M:FileHelpers.FieldConverterAttribute.#ctor(System.Type)">
            <summary>Indicates a custom <see cref="T:FileHelpers.ConverterBase"/> implementation.</summary>
            <param name="customConverter">The Type of your custom converter.</param>
        </member>
        <member name="T:FileHelpers.RunTime.FixedFieldBuilder">
            <summary>Used to create Fixed Length fields and set their properties.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FixedFieldBuilder.FieldLength">
            <summary>The fixed length of the field.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FixedFieldBuilder.AlignMode">
            <summary>The align of the field used for write operations.</summary>
        </member>
        <member name="P:FileHelpers.RunTime.FixedFieldBuilder.AlignChar">
            <summary>The align char of the field used for write operations.</summary>
        </member>
        <member name="T:FileHelpers.DelimitedRecordOptions">
            <summary>
            This class allows you to set some options of the delimited records but at runtime.
            With this options the library is more flexible than never.
            </summary>
        </member>
        <member name="P:FileHelpers.DelimitedRecordOptions.Delimiter">
            <summary>
            The delimiter used to identify each field in the data.
            </summary>
        </member>
        <member name="T:FileHelpers.TrimMode">
            <summary>Indicates the triming behavior of the trailing characters.</summary>
        </member>
        <member name="F:FileHelpers.TrimMode.None">
            <summary>No triming is performed.</summary>
        </member>
        <member name="F:FileHelpers.TrimMode.Both">
            <summary>The field is trimed in both sides.</summary>
        </member>
        <member name="F:FileHelpers.TrimMode.Left">
            <summary>The field is trimed in the left.</summary>
        </member>
        <member name="F:FileHelpers.TrimMode.Right">
            <summary>The field is trimed in the right.</summary>
        </member>
        <member name="T:FileHelpers.DataLink.OleDbStorage">
            <summary>This is a base class that implements the <see cref="T:FileHelpers.DataLink.DataStorage"/> for Microsoft Access Files.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.OleDbStorage.#ctor(System.Type,System.String)">
            <summary>
            Create a new OleDbStorage based in the record type and in the connection string.
            </summary>
            <param name="recordType">The Type of the records.</param>
            <param name="oleDbConnString">The conection string used to create the OleDbConnection.</param>
        </member>
        <member name="M:FileHelpers.DataLink.OleDbStorage.CreateConnection">
            <summary>Must create an abstract connection object.</summary>
            <returns>An Abstract Connection Object.</returns>
        </member>
        <member name="T:FileHelpers.ConvertHelpers">
            <summary>Class that provides static methods that returns a default <see cref="T:FileHelpers.ConverterBase">Converter</see> to the basic types.</summary>
            <remarks>Used by the <see cref="T:FileHelpers.FieldConverterAttribute"/>.</remarks>
        </member>
        <member name="T:FileHelpers.IgnoreEmptyLinesAttribute">
            <summary>Indicates that the engine must ignore the empty lines while reading.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.IgnoreEmptyLinesAttribute.#ctor">
            <summary>Indicates that the engine must ignore the empty lines while reading.</summary>
        </member>
        <member name="M:FileHelpers.IgnoreEmptyLinesAttribute.#ctor(System.Boolean)">
            <summary>Indicates that the engine must ignore the empty lines while reading.</summary>
            <param name="ignoreSpaces">Indicates if also must ignore lines with spaces.</param>
        </member>
        <member name="T:FileHelpers.FieldTrimAttribute">
            <summary>Indicates the <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read to truncate the field. </summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldTrimAttribute.#ctor(FileHelpers.TrimMode)">
            <summary>Indicates the <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read to truncate the field. By default trims the blank spaces and tabs.</summary>
            <param name="mode">The <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read.</param>
        </member>
        <member name="M:FileHelpers.FieldTrimAttribute.#ctor(FileHelpers.TrimMode,System.Char[])">
            <summary>Indicates the <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read to truncate the field. </summary>
            <param name="mode">The <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read.</param>
            <param name="chars">A list of chars used to trim.</param>
        </member>
        <member name="M:FileHelpers.FieldTrimAttribute.#ctor(FileHelpers.TrimMode,System.String)">
            <summary>Indicates the <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read to truncate the field. </summary>
            <param name="mode">The <see cref="F:FileHelpers.FieldTrimAttribute.TrimMode"/> used after read.</param>
            <param name="trimChars">A string of chars used to trim.</param>
        </member>
        <member name="T:FileHelpers.ConditionalRecordAttribute">
            <summary>Allow to declarative set what records must be included or excluded when reading.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.ConditionalRecordAttribute.#ctor(FileHelpers.RecordCondition,System.String)">
            <summary>Allow to declarative show what records must be included or excluded</summary>
            <param name="condition">The condition used to include or exclude each record</param>
            <param name="selector">The selector for the condition.</param>
        </member>
        <member name="T:FileHelpers.MasterDetail.MasterDetailEngine`2">
            <typeparam name="M">The Master Record Type</typeparam>
            <typeparam name="D">The Detail Record Type</typeparam>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.#ctor(FileHelpers.MasterDetail.MasterDetailSelector)">
            <summary>
			 Initializes a new instance of the MasterDetailEngine class with the specified type of records.
		</summary><param name="masterType">The master record class.</param><param name="detailType">The detail record class.</param><param name="recordSelector">The <see cref="T:FileHelpers.MasterDetail.MasterDetailSelector"/> to get the <see cref="T:FileHelpers.MasterDetail.RecordAction"/>.</param>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.#ctor(FileHelpers.MasterDetail.CommonSelector,System.String)">
            <summary>
			 Initializes a new instance of the MasterDetailEngine class with the specified type of records.
		</summary><param name="masterType">The master record class.</param><param name="detailType">The detail record class.</param><param name="action">The <see cref="T:FileHelpers.MasterDetail.CommonSelector"/> used by the engine.</param><param name="selector">The string passed to the selector.</param>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.ReadFile(System.String)">
            <summary>
		Read a file and return an array of the contained records.
		</summary><remarks>
		This method open, read and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be read.</param><returns>An array of the records in the file</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.ReadStream(System.IO.TextReader)">
            <summary>
		Read a Stream and return an array of the contained records.
		</summary><remarks>
		This method only uses the stream and dont close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="reader">The reader of the source stream.</param><returns>An array of the records in the Stream</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.ReadString(System.String)">
            <summary>
		Read a String and return an array of the contained records.
		</summary><param name="source">The string that contains the records.</param><returns>An array of the records in the String.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteFile(System.String,FileHelpers.MasterDetail.MasterDetails{`0,`1}[])">
            <summary>
		Write an array of records to the specified file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteFile(System.String,FileHelpers.MasterDetail.MasterDetails{`0,`1}[],System.Int32)">
            <summary>
		Write the specified number of records from the array to a file.
		</summary><remarks>
		<para>This method open, write and close the file (don't open or close the file before or after to call this method)</para>
		<para>This method overrides existing files.</para>
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be write.</param><param name="records">The array of records to write.</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteStream(System.IO.TextWriter,FileHelpers.MasterDetail.MasterDetails{`0,`1}[])">
            <summary>
		Write an array of records to the specified Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteStream(System.IO.TextWriter,FileHelpers.MasterDetail.MasterDetails{`0,`1}[],System.Int32)">
            <summary>
		Write the specified number of records in the array to the Stream.
		</summary><remarks>
		This method only uses the stream and don't close them after use it, you must do it.
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="writer">The writer of the source stream.</param><param name="records">The array of records to write.</param><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteString(FileHelpers.MasterDetail.MasterDetails{`0,`1}[])">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The array of records to write.</param><returns>The resulting string after write the records.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.WriteString(FileHelpers.MasterDetail.MasterDetails{`0,`1}[],System.Int32)">
            <summary>
		Write an array of records to an String and return it.
		</summary><param name="records">The array of records to write.</param><returns>The resulting string after write the records.</returns><param name="maxRecords">The max number of array elements to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.AppendToFile(System.String,FileHelpers.MasterDetail.MasterDetails{`0,`1})">
            <summary>
		Append a record to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="record">The record to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="M:FileHelpers.MasterDetail.MasterDetailEngine`2.AppendToFile(System.String,FileHelpers.MasterDetail.MasterDetails{`0,`1}[])">
            <summary>
		Append an array of records to the specified file.
		</summary><remarks>
		This method open, seek ends, write and close the file (don't open or close the file before or after to call this method)
		</remarks><example>
You need to define a Selector Method too:

		<code>
RecordAction ExampleSelector(string record)
{
   if (Char.IsLetter(record[0]))
      return RecordAction.Master;
    else
      return RecordAction.Detail;
}
                      
		</code>
Finally you must to instanciate a MasterDetailEngine and Read/Write files:

		<code>
MaterDetailEngine engine = new MaterDetailEngine(typeof(Customers), typeof(Orders), new MasterDetailSelector(ExampleSelector));

// to Read use:
MasterDetail[] res = engine.ReadFile("TestIn.txt");

// to Write use:
engine.WriteFile("TestOut.txt", res);

		</code>
		</example><param name="fileName">The file path to be written at end.</param><param name="records">The array of records to write.</param><returns>True if the operation is successful. False otherwise.</returns>
        </member>
        <member name="P:FileHelpers.MasterDetail.MasterDetailEngine`2.MasterType">
            <summary>Returns the type of the master records handled by this engine.</summary>
        </member>
        <member name="T:FileHelpers.BeforeReadRecordHandler`1">
            <summary>
            Called in read operations just before the record string is translated to a record.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.AfterReadRecordHandler`1">
            <summary>
            Called in read operations just after the record was created from a record string.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.BeforeWriteRecordHandler`1">
            <summary>
            Called in write operations just before the record is converted to a string to write it.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.AfterWriteRecordHandler`1">
            <summary>
            Called in write operations just after the record was converted to a string.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.BeforeReadRecordHandler">
            <summary>
            Called in read operations just before the record string is translated to a record.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.AfterReadRecordHandler">
            <summary>
            Called in read operations just after the record was created from a record string.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.BeforeWriteRecordHandler">
            <summary>
            Called in write operations just before the record is converted to a string to write it.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.AfterWriteRecordHandler">
            <summary>
            Called in write operations just after the record was converted to a string.
            </summary>
            <param name="engine">The engine that generates the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:FileHelpers.ConvertException">
            <summary>
            Indicates that a string value can't be converted to a dest type.
            </summary>
        </member>
        <member name="M:FileHelpers.ConvertException.#ctor(System.String,System.Type)">
            <summary>
            Create a new ConvertException object
            </summary>
            <param name="origValue">The value to convert.</param>
            <param name="destType">The destination Type.</param>
        </member>
        <member name="M:FileHelpers.ConvertException.#ctor(System.String,System.Type,System.String)">
            <summary>
            Create a new ConvertException object
            </summary>
            <param name="origValue">The value to convert.</param>
            <param name="destType">The destination Type.</param>
            <param name="extraInfo">Aditional info of the error.</param>
        </member>
        <member name="M:FileHelpers.ConvertException.#ctor(System.String,System.Type,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create a new ConvertException object
            </summary>
            <param name="origValue">The value to convert.</param>
            <param name="destType">The destination Type.</param>
            <param name="extraInfo">Aditional info of the error.</param>
            <param name="columnNumber">The estimated column number.</param>
            <param name="lineNumber">The line where the error was found.</param>
            <param name="fieldName">The name of the field with the error</param>
        </member>
        <member name="P:FileHelpers.ConvertException.FieldType">
            <summary>The destination type.</summary>
        </member>
        <member name="P:FileHelpers.ConvertException.FieldStringValue">
            <summary>The value that cant be converterd. (null for unknown)</summary>
        </member>
        <member name="P:FileHelpers.ConvertException.MessageExtra">
            <summary>Extra info about the error.</summary>
        </member>
        <member name="P:FileHelpers.ConvertException.FieldName">
            <summary>The name of the field related to the exception. (null for unknown)</summary>
        </member>
        <member name="P:FileHelpers.ConvertException.LineNumber">
            <summary>The line where the error was found. (-1 is unknown)</summary>
        </member>
        <member name="P:FileHelpers.ConvertException.ColumnNumber">
            <summary>The estimate column where the error was found. (-1 is unknown)</summary>
        </member>
        <member name="T:FileHelpers.MultilineMode">
            <summary>Indicates the behavior of multiline fields.</summary>
        </member>
        <member name="F:FileHelpers.MultilineMode.AllowForBoth">
            <summary>The engine can handle multiline values for read or write.</summary>
        </member>
        <member name="F:FileHelpers.MultilineMode.AllowForRead">
            <summary>The engine can handle multiline values only for read.</summary>
        </member>
        <member name="F:FileHelpers.MultilineMode.AllowForWrite">
            <summary>The engine can handle multiline values only for write.</summary>
        </member>
        <member name="F:FileHelpers.MultilineMode.NotAllow">
            <summary>The engine donÂ´t allow multiline values for this field.</summary>
        </member>
        <member name="T:FileHelpers.DataLink.SqlServerStorage">
            <summary>This is a base class that implements the <see cref="T:FileHelpers.DataLink.DataStorage"/> for Microsoft SqlServer.</summary>
        </member>
        <member name="M:FileHelpers.DataLink.SqlServerStorage.#ctor(System.Type)">
            <summary>Create a new instance of the SqlServerStorage based on the record type provided.</summary>
            <param name="recordType">The type of the record class.</param>
        </member>
        <member name="M:FileHelpers.DataLink.SqlServerStorage.#ctor(System.Type,System.String)">
            <summary>Create a new instance of the SqlServerStorage based on the record type provided.</summary>
            <param name="recordType">The type of the record class.</param>
            <param name="connectionStr">The full conection string used to connect to the sql server.</param>
        </member>
        <member name="M:FileHelpers.DataLink.SqlServerStorage.#ctor(System.Type,System.String,System.String)">
            <summary>Create a new instance of the SqlServerStorage based on the record type provided (uses windows auth)</summary>
            <param name="recordType">The type of the record class.</param>
            <param name="server">The server name or IP of the sqlserver</param>
            <param name="database">The database name into the server.</param>
        </member>
        <member name="M:FileHelpers.DataLink.SqlServerStorage.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <summary>Create a new instance of the SqlServerStorage based on the record type provided (uses SqlServer auth)</summary>
            <param name="recordType">The type of the record class.</param>
            <param name="server">The server name or IP of the sqlserver</param>
            <param name="database">The database name into the server.</param>
            <param name="user">The sql username to login into the server.</param>
            <param name="pass">The pass of the sql username to login into the server.</param>
        </member>
        <member name="M:FileHelpers.DataLink.SqlServerStorage.CreateConnection">
            <summary>Must create an abstract connection object.</summary>
            <returns>An Abstract Connection Object.</returns>
        </member>
        <member name="P:FileHelpers.DataLink.SqlServerStorage.ServerName">
            <summary> The server name or IP of the SqlServer </summary>
        </member>
        <member name="P:FileHelpers.DataLink.SqlServerStorage.DatabaseName">
            <summary> The name of the database. </summary> 
        </member>
        <member name="P:FileHelpers.DataLink.SqlServerStorage.UserName">
            <summary> The user name used to logon into the SqlServer. (leave empty for WindowsAuth)</summary>
        </member>
        <member name="P:FileHelpers.DataLink.SqlServerStorage.UserPass">
            <summary> The user pass used to logon into the SqlServer. (leave empty for WindowsAuth)</summary>
        </member>
        <member name="P:FileHelpers.DataLink.SqlServerStorage.ExecuteInBatch">
            <summary></summary>
        </member>
        <member name="T:FileHelpers.FieldInNewLineAttribute">
            <summary>Indicates the target field has a new line before his value (i.e. indicates that the records has multiple lines, and this field is in the begining of a line)</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldInNewLineAttribute.#ctor">
            <summary>Indicates the target field has a new line before his value (i.e. indicates that the records has multiple lines, and this field is in the begining of a line)</summary>
        </member>
        <member name="T:FileHelpers.FieldFixedLengthAttribute">
            <summary>Indicates the length of a FixedLength field.</summary>
            <remarks>See the <a href="attributes.html">Complete Attributes List</a> for more clear info and examples of each one.</remarks>
            <seealso href="attributes.html">Attributes List</seealso>
            <seealso href="quick_start.html">Quick Start Guide</seealso>
            <seealso href="examples.html">Examples of Use</seealso>
        </member>
        <member name="M:FileHelpers.FieldFixedLengthAttribute.#ctor(System.Int32)">
            <summary>Indicates the length of a FixedLength field.</summary>
            <param name="length">The length of the field.</param>
        </member>
    </members>
</doc>
